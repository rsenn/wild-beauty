{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ini",
				"initialMobxState"
			],
			[
				"max",
				"maxWidthOrHeight"
			],
			[
				"ani",
				"animateLogo"
			],
			[
				"M",
				"MultitouchListener"
			],
			[
				"init",
				"initialized"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/lib/util.js",
						"symkeys":
						[
							[
								132,
								149
							],
							[
								384,
								433
							],
							[
								1320,
								1324
							],
							[
								2140,
								2147
							],
							[
								2669,
								2683
							],
							[
								2943,
								2949
							],
							[
								3052,
								3079
							],
							[
								3127,
								3158
							],
							[
								3314,
								3324
							],
							[
								3363,
								3387
							],
							[
								3454,
								3470
							],
							[
								3515,
								3532
							],
							[
								3580,
								3600
							],
							[
								3651,
								3674
							],
							[
								3722,
								3748
							],
							[
								4149,
								4154
							],
							[
								4213,
								4237
							],
							[
								4260,
								4276
							],
							[
								4291,
								4302
							],
							[
								4342,
								4358
							],
							[
								4373,
								4385
							],
							[
								4426,
								4442
							],
							[
								4457,
								4472
							],
							[
								4516,
								4532
							],
							[
								4547,
								4565
							],
							[
								4612,
								4628
							],
							[
								4643,
								4664
							],
							[
								4714,
								4730
							],
							[
								4745,
								4769
							],
							[
								4895,
								4918
							],
							[
								5001,
								5021
							],
							[
								5276,
								5288
							],
							[
								5338,
								5350
							],
							[
								5470,
								5493
							],
							[
								5576,
								5603
							],
							[
								5858,
								5879
							],
							[
								5942,
								5963
							],
							[
								6099,
								6123
							],
							[
								6209,
								6216
							],
							[
								6237,
								6244
							],
							[
								6274,
								6296
							],
							[
								6379,
								6386
							],
							[
								6404,
								6411
							],
							[
								6436,
								6458
							],
							[
								6508,
								6515
							],
							[
								6569,
								6576
							],
							[
								6608,
								6637
							],
							[
								6983,
								7008
							],
							[
								7135,
								7154
							],
							[
								7236,
								7255
							],
							[
								7442,
								7461
							],
							[
								7539,
								7558
							],
							[
								7623,
								7642
							],
							[
								7738,
								7778
							],
							[
								7920,
								7933
							],
							[
								7959,
								7992
							],
							[
								8241,
								8255
							],
							[
								8416,
								8423
							],
							[
								8640,
								8646
							],
							[
								9052,
								9076
							],
							[
								9455,
								9491
							],
							[
								9533,
								9551
							],
							[
								9734,
								9771
							],
							[
								9852,
								9870
							],
							[
								9888,
								9899
							],
							[
								9965,
								9999
							],
							[
								10026,
								10044
							],
							[
								10319,
								10364
							],
							[
								10564,
								10582
							],
							[
								10833,
								10859
							],
							[
								11118,
								11137
							],
							[
								11216,
								11235
							],
							[
								11385,
								11433
							],
							[
								11614,
								11629
							],
							[
								11655,
								11665
							],
							[
								11752,
								11757
							],
							[
								12524,
								12530
							],
							[
								12606,
								12611
							],
							[
								12620,
								12625
							],
							[
								12654,
								12663
							],
							[
								12683,
								12693
							],
							[
								12715,
								12728
							],
							[
								12756,
								12770
							],
							[
								12796,
								12813
							],
							[
								12841,
								12859
							],
							[
								12960,
								12965
							],
							[
								13173,
								13196
							],
							[
								13647,
								13651
							],
							[
								13693,
								13697
							],
							[
								13804,
								13816
							],
							[
								14405,
								14415
							],
							[
								14503,
								14531
							],
							[
								14565,
								14571
							],
							[
								14633,
								14657
							],
							[
								14687,
								14728
							],
							[
								15004,
								15016
							],
							[
								15049,
								15081
							],
							[
								15123,
								15163
							],
							[
								15317,
								15337
							],
							[
								16623,
								16653
							],
							[
								16713,
								16750
							],
							[
								16935,
								16941
							],
							[
								17156,
								17186
							],
							[
								17266,
								17298
							],
							[
								17526,
								17556
							],
							[
								17693,
								17696
							],
							[
								17833,
								17867
							],
							[
								18024,
								18056
							],
							[
								18346,
								18374
							],
							[
								18452,
								18481
							],
							[
								18556,
								18593
							],
							[
								18643,
								18678
							],
							[
								18859,
								18894
							],
							[
								19194,
								19217
							],
							[
								19248,
								19272
							],
							[
								19336,
								19363
							],
							[
								19396,
								19436
							],
							[
								19554,
								19597
							],
							[
								19900,
								19929
							],
							[
								19986,
								20000
							],
							[
								20049,
								20078
							],
							[
								20120,
								20147
							],
							[
								20257,
								20264
							],
							[
								20284,
								20312
							],
							[
								20402,
								20429
							],
							[
								20468,
								20495
							],
							[
								20545,
								20569
							],
							[
								20644,
								20679
							],
							[
								20781,
								20813
							],
							[
								20898,
								20932
							],
							[
								21017,
								21047
							],
							[
								21267,
								21277
							],
							[
								21330,
								21334
							],
							[
								21402,
								21439
							],
							[
								21476,
								21493
							],
							[
								21516,
								21533
							],
							[
								21593,
								21610
							],
							[
								21696,
								21705
							],
							[
								21777,
								21791
							],
							[
								21859,
								21864
							],
							[
								22562,
								22600
							],
							[
								22751,
								22786
							],
							[
								22870,
								22888
							],
							[
								22946,
								22990
							],
							[
								23004,
								23013
							],
							[
								23045,
								23073
							],
							[
								23087,
								23096
							],
							[
								23165,
								23208
							],
							[
								23328,
								23361
							],
							[
								23388,
								23395
							],
							[
								23524,
								23529
							],
							[
								23545,
								23579
							],
							[
								23656,
								23682
							],
							[
								23780,
								23814
							],
							[
								23837,
								23851
							],
							[
								23886,
								23936
							],
							[
								24074,
								24120
							],
							[
								24181,
								24243
							],
							[
								24254,
								24270
							],
							[
								24405,
								24442
							],
							[
								24481,
								24538
							],
							[
								24909,
								24943
							],
							[
								25073,
								25112
							],
							[
								25187,
								25224
							],
							[
								25341,
								25372
							],
							[
								26127,
								26170
							],
							[
								26301,
								26306
							],
							[
								26462,
								26496
							],
							[
								26704,
								26740
							],
							[
								26802,
								26828
							],
							[
								27588,
								27613
							],
							[
								27681,
								27709
							],
							[
								28302,
								28321
							],
							[
								28416,
								28431
							],
							[
								28559,
								28584
							],
							[
								28884,
								28941
							],
							[
								29064,
								29129
							],
							[
								29239,
								29291
							],
							[
								29412,
								29462
							],
							[
								29578,
								29593
							],
							[
								29664,
								29675
							],
							[
								29763,
								29774
							],
							[
								29800,
								29815
							],
							[
								29893,
								29907
							],
							[
								29947,
								29966
							],
							[
								30189,
								30278
							],
							[
								30281,
								30378
							],
							[
								30434,
								30446
							],
							[
								30511,
								30525
							],
							[
								30557,
								30563
							],
							[
								30606,
								30614
							],
							[
								30660,
								30668
							],
							[
								30724,
								30739
							],
							[
								30792,
								30799
							],
							[
								30910,
								30920
							],
							[
								31062,
								31072
							],
							[
								31135,
								31142
							],
							[
								31227,
								31254
							],
							[
								31278,
								31287
							],
							[
								31309,
								31317
							],
							[
								31334,
								31343
							],
							[
								31382,
								31390
							],
							[
								31401,
								31414
							],
							[
								31425,
								31440
							],
							[
								31469,
								31487
							],
							[
								31567,
								31591
							],
							[
								32012,
								32046
							],
							[
								32077,
								32088
							],
							[
								32093,
								32103
							],
							[
								32117,
								32128
							],
							[
								32149,
								32185
							],
							[
								32689,
								32719
							],
							[
								32763,
								32794
							],
							[
								33029,
								33051
							],
							[
								33111,
								33137
							],
							[
								33253,
								33264
							],
							[
								33376,
								33407
							],
							[
								33611,
								33636
							],
							[
								33703,
								33755
							],
							[
								33867,
								33889
							],
							[
								33895,
								33916
							],
							[
								33933,
								33965
							],
							[
								34085,
								34120
							],
							[
								34185,
								34218
							],
							[
								34265,
								34277
							],
							[
								34347,
								34359
							],
							[
								34416,
								34447
							],
							[
								34491,
								34533
							],
							[
								34709,
								34737
							],
							[
								34848,
								34878
							],
							[
								34890,
								34907
							],
							[
								35031,
								35067
							],
							[
								35144,
								35170
							],
							[
								35212,
								35251
							],
							[
								35363,
								35367
							],
							[
								35394,
								35398
							],
							[
								35437,
								35441
							],
							[
								35469,
								35473
							],
							[
								35496,
								35532
							],
							[
								35570,
								35602
							],
							[
								35720,
								35761
							],
							[
								35854,
								35878
							],
							[
								35901,
								35912
							],
							[
								35930,
								35947
							],
							[
								36033,
								36057
							],
							[
								36080,
								36106
							],
							[
								36562,
								36594
							],
							[
								36848,
								36857
							],
							[
								36888,
								36897
							],
							[
								36928,
								36937
							],
							[
								36968,
								36977
							],
							[
								37008,
								37017
							],
							[
								37047,
								37056
							],
							[
								37087,
								37096
							],
							[
								37105,
								37125
							],
							[
								37169,
								37174
							],
							[
								37217,
								37226
							],
							[
								37394,
								37427
							],
							[
								37801,
								37827
							],
							[
								38053,
								38096
							],
							[
								38138,
								38150
							],
							[
								38228,
								38273
							],
							[
								38394,
								38414
							],
							[
								38535,
								38542
							],
							[
								38561,
								38568
							],
							[
								38748,
								38777
							],
							[
								38906,
								38951
							],
							[
								39079,
								39111
							],
							[
								39190,
								39211
							],
							[
								39462,
								39480
							],
							[
								39667,
								39680
							],
							[
								39802,
								39850
							],
							[
								39863,
								39872
							],
							[
								39910,
								39920
							],
							[
								39967,
								40001
							],
							[
								40278,
								40320
							],
							[
								40374,
								40412
							],
							[
								40574,
								40593
							],
							[
								40793,
								40832
							],
							[
								40966,
								40983
							],
							[
								41523,
								41543
							],
							[
								41631,
								41650
							],
							[
								41691,
								41710
							],
							[
								43563,
								43570
							],
							[
								43585,
								43592
							],
							[
								45209,
								45242
							],
							[
								45390,
								45399
							],
							[
								45415,
								45423
							],
							[
								45427,
								45436
							],
							[
								45577,
								45605
							],
							[
								45719,
								45747
							],
							[
								45861,
								45879
							],
							[
								46258,
								46293
							],
							[
								46333,
								46360
							],
							[
								46441,
								46489
							],
							[
								46690,
								46777
							],
							[
								46788,
								46804
							],
							[
								46913,
								46953
							],
							[
								46979,
								46983
							],
							[
								47000,
								47005
							],
							[
								47024,
								47029
							],
							[
								47047,
								47084
							],
							[
								47110,
								47114
							],
							[
								47120,
								47126
							],
							[
								47141,
								47147
							],
							[
								47155,
								47161
							],
							[
								47177,
								47214
							],
							[
								47240,
								47244
							],
							[
								47258,
								47264
							],
							[
								47272,
								47278
							],
							[
								47285,
								47291
							],
							[
								47308,
								47361
							],
							[
								47362,
								47379
							],
							[
								47484,
								47503
							],
							[
								47550,
								47588
							],
							[
								47613,
								47626
							],
							[
								48221,
								48265
							],
							[
								48337,
								48355
							],
							[
								48609,
								48627
							],
							[
								48954,
								48981
							],
							[
								48990,
								49005
							],
							[
								49081,
								49108
							],
							[
								49235,
								49239
							],
							[
								49317,
								49330
							],
							[
								49527,
								49556
							],
							[
								49664,
								49690
							],
							[
								49758,
								49785
							],
							[
								50057,
								50078
							],
							[
								50148,
								50173
							],
							[
								50193,
								50215
							],
							[
								50279,
								50304
							],
							[
								50429,
								50453
							],
							[
								50677,
								50693
							],
							[
								50694,
								50713
							],
							[
								50746,
								50766
							],
							[
								50855,
								50883
							],
							[
								50981,
								51006
							],
							[
								51056,
								51083
							],
							[
								51086,
								51105
							],
							[
								51410,
								51440
							],
							[
								51483,
								51498
							],
							[
								51566,
								51589
							],
							[
								51628,
								51632
							],
							[
								51672,
								51676
							],
							[
								51714,
								51738
							],
							[
								51805,
								51841
							],
							[
								51906,
								51913
							],
							[
								51951,
								51990
							],
							[
								52130,
								52163
							],
							[
								52355,
								52366
							],
							[
								52463,
								52494
							],
							[
								52553,
								52609
							],
							[
								52973,
								53014
							],
							[
								53380,
								53420
							],
							[
								53648,
								53696
							],
							[
								53728,
								53737
							],
							[
								54020,
								54059
							],
							[
								54070,
								54079
							],
							[
								54118,
								54129
							],
							[
								54534,
								54575
							],
							[
								54621,
								54654
							],
							[
								54731,
								54766
							],
							[
								54866,
								54909
							],
							[
								55089,
								55125
							],
							[
								55442,
								55481
							],
							[
								55612,
								55660
							],
							[
								55828,
								55842
							],
							[
								56014,
								56021
							],
							[
								56137,
								56144
							],
							[
								56479,
								56503
							],
							[
								56533,
								56550
							],
							[
								56607,
								56629
							],
							[
								56658,
								56675
							],
							[
								56781,
								56812
							],
							[
								56886,
								56906
							],
							[
								57040,
								57074
							],
							[
								57104,
								57113
							],
							[
								57129,
								57137
							],
							[
								57141,
								57150
							],
							[
								57243,
								57277
							],
							[
								57578,
								57611
							],
							[
								57973,
								58007
							],
							[
								58377,
								58411
							],
							[
								58694,
								58738
							],
							[
								59363,
								59402
							],
							[
								59530,
								59612
							],
							[
								60738,
								60751
							],
							[
								60769,
								60778
							],
							[
								60796,
								60805
							],
							[
								60856,
								60867
							],
							[
								60891,
								60903
							],
							[
								60910,
								60921
							],
							[
								60958,
								60963
							],
							[
								61066,
								61071
							],
							[
								61216,
								61221
							],
							[
								61250,
								61255
							],
							[
								61286,
								61291
							],
							[
								61486,
								61491
							],
							[
								61695,
								61728
							],
							[
								61741,
								61742
							],
							[
								62151,
								62184
							],
							[
								62348,
								62385
							],
							[
								62393,
								62394
							],
							[
								62851,
								62858
							],
							[
								62997,
								63008
							],
							[
								63094,
								63105
							],
							[
								63432,
								63446
							],
							[
								63763,
								63795
							],
							[
								64305,
								64343
							],
							[
								64642,
								64665
							],
							[
								64678,
								64698
							],
							[
								64761,
								64775
							],
							[
								64779,
								64793
							],
							[
								64870,
								64885
							],
							[
								64959,
								64973
							],
							[
								65016,
								65039
							],
							[
								65231,
								65249
							],
							[
								65455,
								65469
							],
							[
								65473,
								65487
							],
							[
								65658,
								65680
							],
							[
								66224,
								66229
							],
							[
								66271,
								66277
							],
							[
								66320,
								66327
							],
							[
								66356,
								66395
							],
							[
								66424,
								66434
							],
							[
								66440,
								66449
							],
							[
								66467,
								66494
							],
							[
								66534,
								66543
							],
							[
								66552,
								66560
							],
							[
								66608,
								66617
							],
							[
								66643,
								66652
							],
							[
								66663,
								66671
							],
							[
								66743,
								66752
							],
							[
								66835,
								66879
							],
							[
								66941,
								67002
							],
							[
								67310,
								67336
							],
							[
								67364,
								67369
							],
							[
								67393,
								67406
							],
							[
								67514,
								67579
							],
							[
								67683,
								67709
							],
							[
								67743,
								67769
							],
							[
								67790,
								67823
							],
							[
								67851,
								67867
							],
							[
								67882,
								67889
							],
							[
								67911,
								67927
							],
							[
								67952,
								67979
							],
							[
								68036,
								68051
							],
							[
								68073,
								68085
							],
							[
								68102,
								68117
							],
							[
								68127,
								68136
							],
							[
								68176,
								68185
							],
							[
								68192,
								68198
							],
							[
								68210,
								68239
							],
							[
								68325,
								68335
							],
							[
								68376,
								68391
							],
							[
								68410,
								68423
							],
							[
								68848,
								68858
							],
							[
								68997,
								69009
							],
							[
								69289,
								69310
							],
							[
								69496,
								69507
							],
							[
								69544,
								69553
							],
							[
								69633,
								69666
							],
							[
								69971,
								70000
							],
							[
								70044,
								70066
							],
							[
								70100,
								70139
							],
							[
								70173,
								70179
							],
							[
								70252,
								70277
							],
							[
								70288,
								70300
							],
							[
								70492,
								70502
							],
							[
								70554,
								70604
							],
							[
								71012,
								71042
							],
							[
								71128,
								71158
							],
							[
								71231,
								71262
							],
							[
								71416,
								71440
							],
							[
								71495,
								71519
							],
							[
								71646,
								71650
							],
							[
								71730,
								71755
							],
							[
								71843,
								71866
							],
							[
								71898,
								71904
							],
							[
								72047,
								72048
							],
							[
								72139,
								72143
							],
							[
								72277,
								72308
							],
							[
								72559,
								72571
							],
							[
								72687,
								72701
							],
							[
								72847,
								72879
							],
							[
								73083,
								73109
							],
							[
								73110,
								73127
							],
							[
								73176,
								73199
							],
							[
								73232,
								73242
							],
							[
								73291,
								73303
							],
							[
								73618,
								73628
							],
							[
								73820,
								73832
							],
							[
								74507,
								74540
							],
							[
								74568,
								74582
							],
							[
								74676,
								74701
							],
							[
								74850,
								74878
							],
							[
								75012,
								75041
							],
							[
								75341,
								75389
							],
							[
								75578,
								75615
							],
							[
								75664,
								75712
							],
							[
								75826,
								75860
							],
							[
								75868,
								75892
							],
							[
								76406,
								76436
							],
							[
								76562,
								76589
							],
							[
								77066,
								77117
							],
							[
								77159,
								77186
							],
							[
								77356,
								77404
							],
							[
								77616,
								77651
							],
							[
								77858,
								77891
							],
							[
								78163,
								78194
							],
							[
								78440,
								78484
							],
							[
								78620,
								78636
							],
							[
								78796,
								78846
							],
							[
								79240,
								79245
							],
							[
								79326,
								79339
							],
							[
								79388,
								79398
							],
							[
								79402,
								79415
							],
							[
								79490,
								79505
							],
							[
								79554,
								79564
							],
							[
								79568,
								79583
							],
							[
								79650,
								79683
							],
							[
								79793,
								79800
							],
							[
								80084,
								80099
							],
							[
								80356,
								80381
							],
							[
								80442,
								80470
							],
							[
								80559,
								80568
							],
							[
								81535,
								81566
							],
							[
								81738,
								81752
							],
							[
								82375,
								82409
							],
							[
								82594,
								82616
							],
							[
								82652,
								82676
							],
							[
								82679,
								82699
							],
							[
								82943,
								82969
							],
							[
								83064,
								83102
							],
							[
								83504,
								83547
							],
							[
								83619,
								83641
							],
							[
								83663,
								83689
							],
							[
								83814,
								83922
							],
							[
								84160,
								84211
							],
							[
								84289,
								84323
							],
							[
								84411,
								84439
							],
							[
								84473,
								84508
							],
							[
								84582,
								84607
							],
							[
								84629,
								84646
							],
							[
								84688,
								84737
							],
							[
								84810,
								84823
							],
							[
								84894,
								84907
							],
							[
								85083,
								85121
							],
							[
								85132,
								85151
							],
							[
								85205,
								85246
							],
							[
								85257,
								85276
							],
							[
								85334,
								85359
							],
							[
								85406,
								85445
							],
							[
								85530,
								85543
							],
							[
								85582,
								85592
							],
							[
								85646,
								85653
							],
							[
								85678,
								85684
							],
							[
								85726,
								85739
							],
							[
								85759,
								85795
							],
							[
								85880,
								85893
							],
							[
								85932,
								85942
							],
							[
								85975,
								85982
							],
							[
								86088,
								86121
							],
							[
								86201,
								86236
							],
							[
								86276,
								86286
							],
							[
								86401,
								86429
							],
							[
								86591,
								86603
							],
							[
								86708,
								86733
							],
							[
								86848,
								86861
							],
							[
								86960,
								86987
							],
							[
								87106,
								87119
							],
							[
								87222,
								87255
							],
							[
								87478,
								87497
							],
							[
								87576,
								87604
							],
							[
								87623,
								87642
							],
							[
								87660,
								87695
							],
							[
								88038,
								88069
							],
							[
								88128,
								88141
							],
							[
								88225,
								88257
							],
							[
								88438,
								88488
							],
							[
								88531,
								88558
							],
							[
								88760,
								88793
							],
							[
								88844,
								88879
							],
							[
								88892,
								88906
							],
							[
								88973,
								89035
							],
							[
								89234,
								89250
							],
							[
								89477,
								89487
							],
							[
								89525,
								89535
							],
							[
								89555,
								89565
							],
							[
								89593,
								89618
							],
							[
								89744,
								89769
							],
							[
								90043,
								90070
							],
							[
								90302,
								90314
							],
							[
								91967,
								92002
							],
							[
								92021,
								92029
							],
							[
								92077,
								92092
							],
							[
								92240,
								92253
							],
							[
								92446,
								92462
							],
							[
								92669,
								92694
							],
							[
								92709,
								92731
							],
							[
								92947,
								92951
							],
							[
								93165,
								93187
							],
							[
								93209,
								93219
							],
							[
								93237,
								93250
							],
							[
								93397,
								93419
							],
							[
								93441,
								93451
							],
							[
								93469,
								93482
							],
							[
								93611,
								93633
							],
							[
								93659,
								93669
							],
							[
								93687,
								93700
							],
							[
								93736,
								93758
							],
							[
								93779,
								93789
							],
							[
								93807,
								93820
							],
							[
								93840,
								93881
							],
							[
								94188,
								94211
							],
							[
								94292,
								94314
							],
							[
								94388,
								94408
							],
							[
								94535,
								94546
							],
							[
								94579,
								94596
							],
							[
								94772,
								94791
							],
							[
								94826,
								94848
							],
							[
								94980,
								95001
							],
							[
								95139,
								95159
							],
							[
								95226,
								95249
							],
							[
								95325,
								95347
							],
							[
								95465,
								95489
							],
							[
								95551,
								95563
							],
							[
								95734,
								95752
							],
							[
								95814,
								95826
							],
							[
								95978,
								96001
							],
							[
								96142,
								96158
							],
							[
								96214,
								96227
							],
							[
								96259,
								96327
							],
							[
								96368,
								96390
							],
							[
								96419,
								96429
							],
							[
								96445,
								96458
							],
							[
								96518,
								96531
							],
							[
								96607,
								96630
							],
							[
								96758,
								96780
							],
							[
								96877,
								96890
							],
							[
								96952,
								96968
							],
							[
								97006,
								97010
							],
							[
								97269,
								97312
							],
							[
								97327,
								97352
							],
							[
								97495,
								97503
							],
							[
								97517,
								97524
							],
							[
								97533,
								97538
							],
							[
								97556,
								97597
							],
							[
								97610,
								97617
							],
							[
								97694,
								97733
							],
							[
								97885,
								97896
							],
							[
								97931,
								97952
							],
							[
								98030,
								98037
							],
							[
								98069,
								98094
							],
							[
								98152,
								98161
							],
							[
								98178,
								98185
							],
							[
								98203,
								98229
							],
							[
								98287,
								98296
							],
							[
								98314,
								98321
							],
							[
								98340,
								98435
							],
							[
								99067,
								99087
							],
							[
								99088,
								99102
							],
							[
								99124,
								99131
							],
							[
								99158,
								99178
							],
							[
								99179,
								99193
							],
							[
								99214,
								99221
							],
							[
								99265,
								99279
							],
							[
								99351,
								99400
							],
							[
								99413,
								99429
							],
							[
								99463,
								99479
							],
							[
								99571,
								99603
							],
							[
								99634,
								99673
							],
							[
								100054,
								100095
							],
							[
								100134,
								100141
							],
							[
								100197,
								100217
							],
							[
								100255,
								100274
							],
							[
								100348,
								100365
							],
							[
								100384,
								100404
							],
							[
								100408,
								100425
							],
							[
								100475,
								100498
							],
							[
								100599,
								100622
							],
							[
								100666,
								100685
							],
							[
								100728,
								100756
							],
							[
								100852,
								100873
							],
							[
								100949,
								100975
							],
							[
								101088,
								101106
							],
							[
								101160,
								101165
							],
							[
								101168,
								101174
							],
							[
								101187,
								101233
							],
							[
								101316,
								101329
							],
							[
								101707,
								101720
							],
							[
								101783,
								101832
							],
							[
								101845,
								101861
							],
							[
								101883,
								101896
							],
							[
								101924,
								101936
							],
							[
								101940,
								101953
							],
							[
								102015,
								102067
							],
							[
								102256,
								102269
							],
							[
								102332,
								102371
							],
							[
								102515,
								102550
							],
							[
								102622,
								102626
							],
							[
								102653,
								102662
							],
							[
								102913,
								102948
							],
							[
								103024,
								103045
							],
							[
								103060,
								103068
							],
							[
								103081,
								103090
							],
							[
								103112,
								103116
							],
							[
								103155,
								103159
							],
							[
								103209,
								103245
							],
							[
								103291,
								103340
							],
							[
								103656,
								103684
							],
							[
								103744,
								103795
							],
							[
								104046,
								104089
							],
							[
								104142,
								104185
							],
							[
								104221,
								104226
							],
							[
								104303,
								104317
							],
							[
								104352,
								104362
							],
							[
								104375,
								104410
							],
							[
								104454,
								104462
							],
							[
								105009,
								105053
							],
							[
								105588,
								105611
							],
							[
								106019,
								106061
							],
							[
								106867,
								106890
							],
							[
								107262,
								107267
							],
							[
								107821,
								107834
							],
							[
								107870,
								107885
							],
							[
								107923,
								107940
							],
							[
								107982,
								108026
							],
							[
								108225,
								108232
							],
							[
								108875,
								108888
							],
							[
								108923,
								108932
							],
							[
								108989,
								109008
							],
							[
								109114,
								109127
							],
							[
								109302,
								109317
							],
							[
								109361,
								109378
							],
							[
								109424,
								109437
							],
							[
								109479,
								109492
							],
							[
								109534,
								109549
							],
							[
								109593,
								109610
							],
							[
								109738,
								109743
							],
							[
								109892,
								109918
							],
							[
								110095,
								110109
							],
							[
								110132,
								110137
							],
							[
								110771,
								110775
							],
							[
								110833,
								110837
							],
							[
								111080,
								111089
							],
							[
								111214,
								111227
							],
							[
								111301,
								111315
							],
							[
								111566,
								111589
							],
							[
								111607,
								111616
							],
							[
								111633,
								111644
							],
							[
								111654,
								111663
							],
							[
								111683,
								111711
							],
							[
								111820,
								111842
							],
							[
								111860,
								111869
							],
							[
								111889,
								111902
							],
							[
								111960,
								111969
							],
							[
								111989,
								112031
							],
							[
								112504,
								112512
							],
							[
								112547,
								112558
							],
							[
								112635,
								112673
							],
							[
								113024,
								113045
							],
							[
								113130,
								113164
							],
							[
								113317,
								113356
							],
							[
								113411,
								113423
							],
							[
								113882,
								113890
							],
							[
								114022,
								114029
							],
							[
								114088,
								114096
							],
							[
								114209,
								114226
							],
							[
								114305,
								114309
							],
							[
								114363,
								114380
							],
							[
								114492,
								114540
							],
							[
								114826,
								114921
							],
							[
								115056,
								115068
							],
							[
								115078,
								115090
							],
							[
								115095,
								115108
							],
							[
								115214,
								115226
							],
							[
								115236,
								115248
							],
							[
								115253,
								115266
							],
							[
								115374,
								115382
							],
							[
								115593,
								115601
							],
							[
								115976,
								115986
							],
							[
								116066,
								116076
							],
							[
								116157,
								116165
							],
							[
								116296,
								116315
							],
							[
								116949,
								116953
							],
							[
								117022,
								117039
							],
							[
								117079,
								117094
							],
							[
								117132,
								117145
							],
							[
								117181,
								117196
							],
							[
								117306,
								117311
							],
							[
								117381,
								117390
							],
							[
								117411,
								117421
							],
							[
								117528,
								117593
							],
							[
								117944,
								117978
							],
							[
								118062,
								118105
							],
							[
								118321,
								118368
							],
							[
								118559,
								118610
							],
							[
								118830,
								118882
							],
							[
								119230,
								119273
							],
							[
								119589,
								119593
							],
							[
								119708,
								119783
							],
							[
								120101,
								120105
							],
							[
								120338,
								120380
							],
							[
								120444,
								120452
							],
							[
								120613,
								120654
							],
							[
								120701,
								120733
							],
							[
								120814,
								120847
							],
							[
								120906,
								120970
							],
							[
								121210,
								121251
							],
							[
								121289,
								121307
							],
							[
								121356,
								121363
							],
							[
								121557,
								121621
							],
							[
								121797,
								121862
							],
							[
								121875,
								121887
							],
							[
								121904,
								121915
							],
							[
								121939,
								121954
							],
							[
								122337,
								122367
							],
							[
								122544,
								122564
							],
							[
								122584,
								122638
							],
							[
								122861,
								122867
							],
							[
								122919,
								122924
							],
							[
								122980,
								122986
							],
							[
								123063,
								123068
							],
							[
								123111,
								123170
							],
							[
								125219,
								125232
							],
							[
								125380,
								125394
							],
							[
								125554,
								125567
							],
							[
								125649,
								125668
							],
							[
								125911,
								125948
							],
							[
								126296,
								126366
							],
							[
								126722,
								126764
							],
							[
								126815,
								126824
							],
							[
								126990,
								127025
							],
							[
								127152,
								127156
							],
							[
								127178,
								127189
							],
							[
								127299,
								127322
							],
							[
								127466,
								127490
							],
							[
								127591,
								127595
							],
							[
								127618,
								127622
							],
							[
								127634,
								127666
							],
							[
								127714,
								127754
							],
							[
								127983,
								128002
							],
							[
								128034,
								128098
							],
							[
								128150,
								128155
							],
							[
								128188,
								128218
							],
							[
								128305,
								128340
							],
							[
								128364,
								128390
							],
							[
								128504,
								128537
							],
							[
								128676,
								128734
							],
							[
								128759,
								128785
							],
							[
								128828,
								128863
							],
							[
								128906,
								128927
							],
							[
								129076,
								129102
							],
							[
								129260,
								129279
							],
							[
								129601,
								129650
							],
							[
								129675,
								129696
							],
							[
								129738,
								129754
							],
							[
								129808,
								129831
							],
							[
								129894,
								129922
							],
							[
								129984,
								130005
							],
							[
								130029,
								130034
							],
							[
								130607,
								130638
							],
							[
								130641,
								130659
							],
							[
								130711,
								130712
							],
							[
								130725,
								130736
							],
							[
								131291,
								131336
							],
							[
								131438,
								131462
							],
							[
								131724,
								131734
							],
							[
								131782,
								131803
							],
							[
								131851,
								131872
							],
							[
								131958,
								131999
							],
							[
								132147,
								132151
							],
							[
								132197,
								132205
							],
							[
								132234,
								132238
							],
							[
								132613,
								132626
							],
							[
								132679,
								132699
							],
							[
								133025,
								133082
							],
							[
								133189,
								133200
							],
							[
								133540,
								133560
							],
							[
								133600,
								133636
							],
							[
								133665,
								133678
							],
							[
								133721,
								133731
							],
							[
								133776,
								133791
							],
							[
								134594,
								134607
							],
							[
								135178,
								135198
							],
							[
								135273,
								135288
							],
							[
								135665,
								135678
							],
							[
								135749,
								135769
							],
							[
								135851,
								135866
							],
							[
								135932,
								135961
							],
							[
								136035,
								136068
							],
							[
								136180,
								136194
							],
							[
								136234,
								136249
							],
							[
								136271,
								136299
							],
							[
								136828,
								136851
							],
							[
								137058,
								137086
							],
							[
								137193,
								137235
							],
							[
								137562,
								137618
							],
							[
								137852,
								137893
							],
							[
								137979,
								137990
							],
							[
								138139,
								138152
							],
							[
								138473,
								138489
							],
							[
								138518,
								138570
							],
							[
								138639,
								138646
							],
							[
								138730,
								138744
							],
							[
								138828,
								138843
							],
							[
								138949,
								138953
							],
							[
								138985,
								139005
							],
							[
								139056,
								139069
							],
							[
								139119,
								139131
							],
							[
								139425,
								139440
							],
							[
								139761,
								139771
							],
							[
								139826,
								139836
							],
							[
								139920,
								139931
							],
							[
								139988,
								139995
							],
							[
								140598,
								140608
							],
							[
								140674,
								140685
							],
							[
								140753,
								140765
							],
							[
								140800,
								140813
							],
							[
								140858,
								140873
							],
							[
								140892,
								140919
							],
							[
								141105,
								141148
							],
							[
								141309,
								141369
							],
							[
								141455,
								141480
							],
							[
								141529,
								141572
							],
							[
								141583,
								141593
							],
							[
								141602,
								141631
							],
							[
								141887,
								141903
							],
							[
								141925,
								141936
							],
							[
								141986,
								142016
							],
							[
								142085,
								142090
							],
							[
								142119,
								142124
							],
							[
								142419,
								142432
							],
							[
								142483,
								142514
							],
							[
								142535,
								142548
							],
							[
								142549,
								142569
							],
							[
								144073,
								144100
							],
							[
								144125,
								144130
							],
							[
								144181,
								144210
							],
							[
								144289,
								144294
							],
							[
								144376,
								144389
							],
							[
								144440,
								144451
							],
							[
								144491,
								144512
							],
							[
								144636,
								144653
							],
							[
								144783,
								144803
							],
							[
								144999,
								145025
							],
							[
								145113,
								145119
							],
							[
								145149,
								145154
							],
							[
								145230,
								145263
							],
							[
								145421,
								145426
							],
							[
								145477,
								145490
							],
							[
								145514,
								145520
							],
							[
								145603,
								145627
							],
							[
								145721,
								145732
							],
							[
								145788,
								145801
							],
							[
								145863,
								145874
							],
							[
								145973,
								145983
							],
							[
								146081,
								146094
							],
							[
								146207,
								146216
							],
							[
								146274,
								146286
							],
							[
								146369,
								146377
							],
							[
								146477,
								146484
							],
							[
								146586,
								146606
							],
							[
								146794,
								146815
							],
							[
								147074,
								147091
							],
							[
								147244,
								147256
							],
							[
								147385,
								147399
							],
							[
								147570,
								147583
							],
							[
								147600,
								147620
							],
							[
								147879,
								147909
							],
							[
								147915,
								147941
							],
							[
								147960,
								147986
							],
							[
								148015,
								148033
							],
							[
								148099,
								148133
							],
							[
								148247,
								148301
							],
							[
								148328,
								148348
							],
							[
								148438,
								148455
							],
							[
								148551,
								148573
							],
							[
								148680,
								148704
							],
							[
								148812,
								148842
							],
							[
								148873,
								148882
							],
							[
								148925,
								148944
							],
							[
								149093,
								149113
							],
							[
								149230,
								149249
							],
							[
								149363,
								149379
							],
							[
								149487,
								149497
							],
							[
								149575,
								149582
							],
							[
								149648,
								149657
							],
							[
								150002,
								150023
							],
							[
								150032,
								150060
							],
							[
								150070,
								150115
							],
							[
								150170,
								150181
							],
							[
								150203,
								150213
							],
							[
								150226,
								150237
							],
							[
								150265,
								150298
							],
							[
								150459,
								150491
							],
							[
								150559,
								150581
							],
							[
								150753,
								150789
							],
							[
								150951,
								150967
							],
							[
								151028,
								151064
							],
							[
								151140,
								151151
							],
							[
								151216,
								151220
							],
							[
								151259,
								151272
							],
							[
								151386,
								151422
							],
							[
								151599,
								151604
							],
							[
								151645,
								151698
							],
							[
								152636,
								152665
							],
							[
								152819,
								152856
							],
							[
								152867,
								152880
							],
							[
								152893,
								152902
							],
							[
								152949,
								152969
							],
							[
								153003,
								153019
							],
							[
								153241,
								153262
							],
							[
								153390,
								153422
							],
							[
								153449,
								153458
							],
							[
								153470,
								153483
							],
							[
								153561,
								153585
							],
							[
								153652,
								153661
							],
							[
								153677,
								153687
							],
							[
								153704,
								153721
							],
							[
								153749,
								153758
							],
							[
								153759,
								153782
							],
							[
								153828,
								153852
							],
							[
								154000,
								154005
							],
							[
								154023,
								154032
							],
							[
								154132,
								154140
							],
							[
								154144,
								154153
							],
							[
								154175,
								154188
							],
							[
								154205,
								154218
							],
							[
								154225,
								154238
							],
							[
								154264,
								154281
							],
							[
								154294,
								154310
							],
							[
								154380,
								154385
							],
							[
								154403,
								154412
							],
							[
								154512,
								154520
							],
							[
								154533,
								154542
							],
							[
								154557,
								154562
							],
							[
								154650,
								154687
							],
							[
								154844,
								154860
							],
							[
								154874,
								154896
							],
							[
								155009,
								155015
							],
							[
								156063,
								156078
							],
							[
								156128,
								156142
							],
							[
								156156,
								156171
							],
							[
								156701,
								156718
							],
							[
								156768,
								156784
							],
							[
								157096,
								157126
							],
							[
								157144,
								157153
							],
							[
								157171,
								157181
							],
							[
								157194,
								157203
							],
							[
								157346,
								157375
							],
							[
								157393,
								157402
							],
							[
								157420,
								157430
							],
							[
								157434,
								157443
							],
							[
								158724,
								158776
							],
							[
								158842,
								158865
							],
							[
								158937,
								158955
							],
							[
								159304,
								159314
							],
							[
								159318,
								159332
							],
							[
								159534,
								159566
							],
							[
								159593,
								159628
							],
							[
								159668,
								159691
							],
							[
								159852,
								159868
							],
							[
								160053,
								160062
							],
							[
								160088,
								160108
							],
							[
								160135,
								160144
							],
							[
								160159,
								160183
							],
							[
								160323,
								160368
							],
							[
								160400,
								160418
							],
							[
								160564,
								160576
							],
							[
								160721,
								160726
							],
							[
								161040,
								161047
							],
							[
								161184,
								161203
							],
							[
								161221,
								161243
							],
							[
								161527,
								161569
							],
							[
								161586,
								161623
							],
							[
								161871,
								161890
							],
							[
								162260,
								162300
							],
							[
								162343,
								162357
							],
							[
								162427,
								162457
							],
							[
								162506,
								162536
							],
							[
								162603,
								162681
							],
							[
								163131,
								163159
							],
							[
								163211,
								163275
							],
							[
								163293,
								163317
							],
							[
								163576,
								163595
							],
							[
								163710,
								163746
							],
							[
								164471,
								164509
							],
							[
								164526,
								164564
							],
							[
								165853,
								165860
							],
							[
								165916,
								165934
							],
							[
								166146,
								166153
							],
							[
								166201,
								166205
							],
							[
								166337,
								166345
							],
							[
								166412,
								166424
							],
							[
								167400,
								167466
							],
							[
								167467,
								167484
							],
							[
								167722,
								167733
							],
							[
								167750,
								167769
							],
							[
								167883,
								167947
							],
							[
								167963,
								167972
							],
							[
								167984,
								167992
							],
							[
								168045,
								168060
							],
							[
								168076,
								168082
							],
							[
								168106,
								168119
							],
							[
								168314,
								168331
							],
							[
								168376,
								168401
							],
							[
								168500,
								168506
							],
							[
								168626,
								168658
							],
							[
								168735,
								168739
							],
							[
								168869,
								168890
							],
							[
								168928,
								168949
							],
							[
								169041,
								169066
							],
							[
								169237,
								169270
							],
							[
								169503,
								169530
							],
							[
								169622,
								169626
							],
							[
								169733,
								169738
							],
							[
								170002,
								170048
							],
							[
								170638,
								170647
							],
							[
								170883,
								170936
							],
							[
								170947,
								170973
							],
							[
								171305,
								171321
							],
							[
								171405,
								171416
							],
							[
								171662,
								171666
							],
							[
								171950,
								172003
							],
							[
								172231,
								172244
							],
							[
								172255,
								172271
							],
							[
								172446,
								172455
							],
							[
								172497,
								172506
							],
							[
								172546,
								172551
							],
							[
								172587,
								172605
							],
							[
								172626,
								172657
							],
							[
								172764,
								172783
							],
							[
								173076,
								173089
							],
							[
								173178,
								173196
							],
							[
								173291,
								173308
							],
							[
								173441,
								173448
							],
							[
								173567,
								173573
							],
							[
								173723,
								173731
							],
							[
								173850,
								173860
							],
							[
								174089,
								174098
							],
							[
								174591,
								174631
							],
							[
								174940,
								174975
							],
							[
								175306,
								175312
							],
							[
								175348,
								175366
							],
							[
								175410,
								175420
							],
							[
								175503,
								175513
							],
							[
								175562,
								175594
							],
							[
								175841,
								175860
							],
							[
								176478,
								176500
							],
							[
								176799,
								176859
							],
							[
								177569,
								177594
							],
							[
								177623,
								177639
							],
							[
								177648,
								177659
							],
							[
								177751,
								177757
							],
							[
								177766,
								177777
							],
							[
								177837,
								177861
							],
							[
								177879,
								177888
							],
							[
								177912,
								177921
							],
							[
								177949,
								177960
							],
							[
								177987,
								177998
							],
							[
								178031,
								178044
							],
							[
								178063,
								178076
							],
							[
								178088,
								178101
							],
							[
								178252,
								178263
							],
							[
								178365,
								178390
							],
							[
								178408,
								178434
							],
							[
								178525,
								178559
							],
							[
								178831,
								178852
							],
							[
								178917,
								178935
							],
							[
								179103,
								179139
							],
							[
								179561,
								179581
							],
							[
								179784,
								179799
							],
							[
								180075,
								180098
							],
							[
								180307,
								180325
							],
							[
								180543,
								180555
							],
							[
								180585,
								180600
							],
							[
								180645,
								180651
							],
							[
								180703,
								180717
							],
							[
								180859,
								180877
							],
							[
								181073,
								181105
							],
							[
								181171,
								181187
							],
							[
								181523,
								181539
							],
							[
								181986,
								181989
							],
							[
								182002,
								182003
							],
							[
								182033,
								182069
							],
							[
								182510,
								182549
							],
							[
								182638,
								182664
							],
							[
								182712,
								182773
							],
							[
								183180,
								183208
							],
							[
								183315,
								183333
							],
							[
								183628,
								183666
							],
							[
								183720,
								183725
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"self = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							"(acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods) =>",
							"Util.bindMethodsTo = function(dest, obj, methods)",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>"
						]
					},
					"AQAAAAAAAAAAAAAA+mUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/stores/RootStore.js",
						"symkeys":
						[
							[
								884,
								893
							],
							[
								1493,
								1528
							],
							[
								2467,
								2478
							],
							[
								2488,
								2510
							],
							[
								2569,
								2580
							],
							[
								2687,
								2693
							],
							[
								2879,
								2885
							],
							[
								2917,
								2928
							],
							[
								3023,
								3042
							],
							[
								3307,
								3333
							],
							[
								3639,
								3655
							],
							[
								3738,
								3751
							],
							[
								3803,
								3821
							],
							[
								4395,
								4401
							],
							[
								4756,
								4768
							],
							[
								4857,
								4872
							],
							[
								4964,
								4981
							],
							[
								5096,
								5107
							],
							[
								5487,
								5504
							],
							[
								5607,
								5618
							],
							[
								6187,
								6205
							],
							[
								6415,
								6429
							],
							[
								6726,
								6742
							],
							[
								6835,
								6848
							],
							[
								6925,
								6933
							],
							[
								7765,
								7808
							],
							[
								7985,
								8028
							],
							[
								8133,
								8139
							],
							[
								8424,
								8428
							],
							[
								8522,
								8526
							],
							[
								8618,
								8622
							],
							[
								8678,
								8686
							],
							[
								8822,
								8845
							],
							[
								8869,
								8882
							],
							[
								8970,
								8989
							],
							[
								9371,
								9404
							],
							[
								9583,
								9591
							],
							[
								9644,
								9652
							],
							[
								9885,
								9902
							],
							[
								9966,
								9972
							],
							[
								10040,
								10046
							],
							[
								11050,
								11067
							],
							[
								11194,
								11200
							],
							[
								11587,
								11623
							],
							[
								11823,
								11839
							],
							[
								12080,
								12101
							],
							[
								12195,
								12199
							],
							[
								12281,
								12295
							]
						],
						"symlist":
						[
							"RootStore",
							"constructor(initialData, pageProps)",
							"constructor",
							".toObject = function()",
							"([k, v]) =>",
							" () =>",
							" () =>",
							"disposer =>",
							"get authenticated()",
							"setAuthentication(cookies)",
							"updateState(obj)",
							"setState(obj)",
							"newPhoto(photoObj)",
							" () =>",
							"getPhoto(id)",
							"photoExists(id)",
							"completed = () =>",
							"response =>",
							"completed = () =>",
							"response =>",
							"get currentPhoto()",
							"get rootItem()",
							"get rootItemId()",
							"newItem(item)",
							"child =>",
							"getItem(id, tr, idMap = null, depth = 1000)",
							"getTree(id, tr, idMap = null, depth = 1000)",
							" it =>",
							"i =>",
							"c =>",
							"i =>",
							"child =>",
							" function* (map = null)",
							"map = item =>",
							"notLoadedChildren()",
							"getHierarchy(item, fn = it => it)",
							"child =>",
							"child =>",
							"completed = () =>",
							" () =>",
							"res =>",
							"completed = () =>",
							"res =>",
							"addToast(title, message, ttl = 5000)",
							" function()",
							"removeToast(deadline)",
							"t =>",
							"removeToasts()"
						]
					},
					"AQAAAAAAAAAAAAAANwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA3AwAAUm9vdFN0b3JlCiAgY29uc3RydWN0b3IoaW5pdGlhbERhdGEsIHBhZ2VQcm9wcykKICBjb25zdHJ1Y3RvcgogIC50b09iamVjdCA9IGZ1bmN0aW9uKCkKKFtrLCB2XSkgPT4KKCkgPT4KKCkgPT4KICBkaXNwb3NlciA9PgogIGdldCBhdXRoZW50aWNhdGVkKCkKICBzZXRBdXRoZW50aWNhdGlvbihjb29raWVzKQogIHVwZGF0ZVN0YXRlKG9iaikKICBzZXRTdGF0ZShvYmopCiAgbmV3UGhvdG8ocGhvdG9PYmopCigpID0+CiAgZ2V0UGhvdG8oaWQpCiAgcGhvdG9FeGlzdHMoaWQpCiAgY29tcGxldGVkID0gKCkgPT4KICByZXNwb25zZSA9PgogIGNvbXBsZXRlZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBnZXQgY3VycmVudFBob3RvKCkKICBnZXQgcm9vdEl0ZW0oKQogIGdldCByb290SXRlbUlkKCkKICBuZXdJdGVtKGl0ZW0pCiAgY2hpbGQgPT4KICBnZXRJdGVtKGlkLCB0ciwgaWRNYXAgPSBudWxsLCBkZXB0aCA9IDEwMDApCiAgZ2V0VHJlZShpZCwgdHIsIGlkTWFwID0gbnVsbCwgZGVwdGggPSAxMDAwKQppdCA9PgogIGkgPT4KICBjID0+CiAgaSA9PgogIGNoaWxkID0+CihtYXAgPSBudWxsKQogIG1hcCA9IGl0ZW0gPT4KICBub3RMb2FkZWRDaGlsZHJlbigpCiAgZ2V0SGllcmFyY2h5KGl0ZW0sIGZuID0gaXQgPT4gaXQpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIGNvbXBsZXRlZCA9ICgpID0+CigpID0+CiAgcmVzID0+CiAgY29tcGxldGVkID0gKCkgPT4KICByZXMgPT4KICBhZGRUb2FzdCh0aXRsZSwgbWVzc2FnZSwgdHRsID0gNTAwMCkKZnVuY3Rpb24oKQogIHJlbW92ZVRvYXN0KGRlYWRsaW5lKQogIHQgPT4KICByZW1vdmVUb2FzdHMoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/stores/RootStore.js",
						"symkeys":
						[
							[
								884,
								893
							],
							[
								1493,
								1528
							],
							[
								2467,
								2478
							],
							[
								2488,
								2510
							],
							[
								2569,
								2580
							],
							[
								2687,
								2693
							],
							[
								2879,
								2885
							],
							[
								2917,
								2928
							],
							[
								3023,
								3042
							],
							[
								3307,
								3333
							],
							[
								3639,
								3655
							],
							[
								3738,
								3751
							],
							[
								3803,
								3821
							],
							[
								4395,
								4401
							],
							[
								4756,
								4768
							],
							[
								4857,
								4872
							],
							[
								4964,
								4981
							],
							[
								5096,
								5107
							],
							[
								5487,
								5504
							],
							[
								5607,
								5618
							],
							[
								6187,
								6205
							],
							[
								6415,
								6429
							],
							[
								6726,
								6742
							],
							[
								6835,
								6848
							],
							[
								6925,
								6933
							],
							[
								7765,
								7808
							],
							[
								7985,
								8028
							],
							[
								8133,
								8139
							],
							[
								8424,
								8428
							],
							[
								8522,
								8526
							],
							[
								8618,
								8622
							],
							[
								8678,
								8686
							],
							[
								8822,
								8845
							],
							[
								8869,
								8882
							],
							[
								8970,
								8989
							],
							[
								9371,
								9404
							],
							[
								9583,
								9591
							],
							[
								9644,
								9652
							],
							[
								9885,
								9902
							],
							[
								9966,
								9972
							],
							[
								10040,
								10046
							],
							[
								11050,
								11067
							],
							[
								11194,
								11200
							],
							[
								11587,
								11623
							],
							[
								11823,
								11839
							],
							[
								12080,
								12101
							],
							[
								12195,
								12199
							],
							[
								12281,
								12295
							]
						],
						"symlist":
						[
							"RootStore",
							"constructor(initialData, pageProps)",
							"constructor",
							".toObject = function()",
							"([k, v]) =>",
							" () =>",
							" () =>",
							"disposer =>",
							"get authenticated()",
							"setAuthentication(cookies)",
							"updateState(obj)",
							"setState(obj)",
							"newPhoto(photoObj)",
							" () =>",
							"getPhoto(id)",
							"photoExists(id)",
							"completed = () =>",
							"response =>",
							"completed = () =>",
							"response =>",
							"get currentPhoto()",
							"get rootItem()",
							"get rootItemId()",
							"newItem(item)",
							"child =>",
							"getItem(id, tr, idMap = null, depth = 1000)",
							"getTree(id, tr, idMap = null, depth = 1000)",
							" it =>",
							"i =>",
							"c =>",
							"i =>",
							"child =>",
							" function* (map = null)",
							"map = item =>",
							"notLoadedChildren()",
							"getHierarchy(item, fn = it => it)",
							"child =>",
							"child =>",
							"completed = () =>",
							" () =>",
							"res =>",
							"completed = () =>",
							"res =>",
							"addToast(title, message, ttl = 5000)",
							" function()",
							"removeToast(deadline)",
							"t =>",
							"removeToasts()"
						]
					},
					"AwAAAAAAAAAAAAAANwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcDAABSb290U3RvcmUKICBjb25zdHJ1Y3Rvcihpbml0aWFsRGF0YSwgcGFnZVByb3BzKQogIGNvbnN0cnVjdG9yCiAgLnRvT2JqZWN0ID0gZnVuY3Rpb24oKQooW2ssIHZdKSA9PgooKSA9PgooKSA9PgogIGRpc3Bvc2VyID0+CiAgZ2V0IGF1dGhlbnRpY2F0ZWQoKQogIHNldEF1dGhlbnRpY2F0aW9uKGNvb2tpZXMpCiAgdXBkYXRlU3RhdGUob2JqKQogIHNldFN0YXRlKG9iaikKICBuZXdQaG90byhwaG90b09iaikKKCkgPT4KICBnZXRQaG90byhpZCkKICBwaG90b0V4aXN0cyhpZCkKICBjb21wbGV0ZWQgPSAoKSA9PgogIHJlc3BvbnNlID0+CiAgY29tcGxldGVkID0gKCkgPT4KICByZXNwb25zZSA9PgogIGdldCBjdXJyZW50UGhvdG8oKQogIGdldCByb290SXRlbSgpCiAgZ2V0IHJvb3RJdGVtSWQoKQogIG5ld0l0ZW0oaXRlbSkKICBjaGlsZCA9PgogIGdldEl0ZW0oaWQsIHRyLCBpZE1hcCA9IG51bGwsIGRlcHRoID0gMTAwMCkKICBnZXRUcmVlKGlkLCB0ciwgaWRNYXAgPSBudWxsLCBkZXB0aCA9IDEwMDApCml0ID0+CiAgaSA9PgogIGMgPT4KICBpID0+CiAgY2hpbGQgPT4KKG1hcCA9IG51bGwpCiAgbWFwID0gaXRlbSA9PgogIG5vdExvYWRlZENoaWxkcmVuKCkKICBnZXRIaWVyYXJjaHkoaXRlbSwgZm4gPSBpdCA9PiBpdCkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgY29tcGxldGVkID0gKCkgPT4KKCkgPT4KICByZXMgPT4KICBjb21wbGV0ZWQgPSAoKSA9PgogIHJlcyA9PgogIGFkZFRvYXN0KHRpdGxlLCBtZXNzYWdlLCB0dGwgPSA1MDAwKQpmdW5jdGlvbigpCiAgcmVtb3ZlVG9hc3QoZGVhZGxpbmUpCiAgdCA9PgogIHJlbW92ZVRvYXN0cygpAAAAAAAAAAA3AwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/stores/RootStore.js",
						"symkeys":
						[
							[
								884,
								893
							],
							[
								1493,
								1528
							],
							[
								2467,
								2478
							],
							[
								2488,
								2510
							],
							[
								2569,
								2580
							],
							[
								2687,
								2693
							],
							[
								2879,
								2885
							],
							[
								2917,
								2928
							],
							[
								3023,
								3042
							],
							[
								3307,
								3333
							],
							[
								3639,
								3655
							],
							[
								3738,
								3751
							],
							[
								3803,
								3821
							],
							[
								4395,
								4401
							],
							[
								4756,
								4768
							],
							[
								4857,
								4872
							],
							[
								4964,
								4981
							],
							[
								5096,
								5107
							],
							[
								5487,
								5504
							],
							[
								5607,
								5618
							],
							[
								6187,
								6205
							],
							[
								6415,
								6429
							],
							[
								6726,
								6742
							],
							[
								6835,
								6848
							],
							[
								6925,
								6933
							],
							[
								7765,
								7808
							],
							[
								7985,
								8028
							],
							[
								8133,
								8139
							],
							[
								8424,
								8428
							],
							[
								8522,
								8526
							],
							[
								8618,
								8622
							],
							[
								8678,
								8686
							],
							[
								8822,
								8845
							],
							[
								8869,
								8882
							],
							[
								8970,
								8989
							],
							[
								9371,
								9404
							],
							[
								9583,
								9591
							],
							[
								9644,
								9652
							],
							[
								9885,
								9902
							],
							[
								9966,
								9972
							],
							[
								10047,
								10053
							],
							[
								11057,
								11074
							],
							[
								11201,
								11207
							],
							[
								11594,
								11630
							],
							[
								11830,
								11846
							],
							[
								12087,
								12108
							],
							[
								12202,
								12206
							],
							[
								12288,
								12302
							]
						],
						"symlist":
						[
							"RootStore",
							"constructor(initialData, pageProps)",
							"constructor",
							".toObject = function()",
							"([k, v]) =>",
							" () =>",
							" () =>",
							"disposer =>",
							"get authenticated()",
							"setAuthentication(cookies)",
							"updateState(obj)",
							"setState(obj)",
							"newPhoto(photoObj)",
							" () =>",
							"getPhoto(id)",
							"photoExists(id)",
							"completed = () =>",
							"response =>",
							"completed = () =>",
							"response =>",
							"get currentPhoto()",
							"get rootItem()",
							"get rootItemId()",
							"newItem(item)",
							"child =>",
							"getItem(id, tr, idMap = null, depth = 1000)",
							"getTree(id, tr, idMap = null, depth = 1000)",
							" it =>",
							"i =>",
							"c =>",
							"i =>",
							"child =>",
							" function* (map = null)",
							"map = item =>",
							"notLoadedChildren()",
							"getHierarchy(item, fn = it => it)",
							"child =>",
							"child =>",
							"completed = () =>",
							" () =>",
							"res =>",
							"completed = () =>",
							"res =>",
							"addToast(title, message, ttl = 5000)",
							" function()",
							"removeToast(deadline)",
							"t =>",
							"removeToasts()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA3AwAAUm9vdFN0b3JlCiAgY29uc3RydWN0b3IoaW5pdGlhbERhdGEsIHBhZ2VQcm9wcykKICBjb25zdHJ1Y3RvcgogIC50b09iamVjdCA9IGZ1bmN0aW9uKCkKKFtrLCB2XSkgPT4KKCkgPT4KKCkgPT4KICBkaXNwb3NlciA9PgogIGdldCBhdXRoZW50aWNhdGVkKCkKICBzZXRBdXRoZW50aWNhdGlvbihjb29raWVzKQogIHVwZGF0ZVN0YXRlKG9iaikKICBzZXRTdGF0ZShvYmopCiAgbmV3UGhvdG8ocGhvdG9PYmopCigpID0+CiAgZ2V0UGhvdG8oaWQpCiAgcGhvdG9FeGlzdHMoaWQpCiAgY29tcGxldGVkID0gKCkgPT4KICByZXNwb25zZSA9PgogIGNvbXBsZXRlZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBnZXQgY3VycmVudFBob3RvKCkKICBnZXQgcm9vdEl0ZW0oKQogIGdldCByb290SXRlbUlkKCkKICBuZXdJdGVtKGl0ZW0pCiAgY2hpbGQgPT4KICBnZXRJdGVtKGlkLCB0ciwgaWRNYXAgPSBudWxsLCBkZXB0aCA9IDEwMDApCiAgZ2V0VHJlZShpZCwgdHIsIGlkTWFwID0gbnVsbCwgZGVwdGggPSAxMDAwKQppdCA9PgogIGkgPT4KICBjID0+CiAgaSA9PgogIGNoaWxkID0+CihtYXAgPSBudWxsKQogIG1hcCA9IGl0ZW0gPT4KICBub3RMb2FkZWRDaGlsZHJlbigpCiAgZ2V0SGllcmFyY2h5KGl0ZW0sIGZuID0gaXQgPT4gaXQpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIGNvbXBsZXRlZCA9ICgpID0+CigpID0+CiAgcmVzID0+CiAgY29tcGxldGVkID0gKCkgPT4KICByZXMgPT4KICBhZGRUb2FzdCh0aXRsZSwgbWVzc2FnZSwgdHRsID0gNTAwMCkKZnVuY3Rpb24oKQogIHJlbW92ZVRvYXN0KGRlYWRsaW5lKQogIHQgPT4KICByZW1vdmVUb2FzdHMoKQAAAAAAAAAANwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcDAABSb290U3RvcmUKICBjb25zdHJ1Y3Rvcihpbml0aWFsRGF0YSwgcGFnZVByb3BzKQogIGNvbnN0cnVjdG9yCiAgLnRvT2JqZWN0ID0gZnVuY3Rpb24oKQooW2ssIHZdKSA9PgooKSA9PgooKSA9PgogIGRpc3Bvc2VyID0+CiAgZ2V0IGF1dGhlbnRpY2F0ZWQoKQogIHNldEF1dGhlbnRpY2F0aW9uKGNvb2tpZXMpCiAgdXBkYXRlU3RhdGUob2JqKQogIHNldFN0YXRlKG9iaikKICBuZXdQaG90byhwaG90b09iaikKKCkgPT4KICBnZXRQaG90byhpZCkKICBwaG90b0V4aXN0cyhpZCkKICBjb21wbGV0ZWQgPSAoKSA9PgogIHJlc3BvbnNlID0+CiAgY29tcGxldGVkID0gKCkgPT4KICByZXNwb25zZSA9PgogIGdldCBjdXJyZW50UGhvdG8oKQogIGdldCByb290SXRlbSgpCiAgZ2V0IHJvb3RJdGVtSWQoKQogIG5ld0l0ZW0oaXRlbSkKICBjaGlsZCA9PgogIGdldEl0ZW0oaWQsIHRyLCBpZE1hcCA9IG51bGwsIGRlcHRoID0gMTAwMCkKICBnZXRUcmVlKGlkLCB0ciwgaWRNYXAgPSBudWxsLCBkZXB0aCA9IDEwMDApCml0ID0+CiAgaSA9PgogIGMgPT4KICBpID0+CiAgY2hpbGQgPT4KKG1hcCA9IG51bGwpCiAgbWFwID0gaXRlbSA9PgogIG5vdExvYWRlZENoaWxkcmVuKCkKICBnZXRIaWVyYXJjaHkoaXRlbSwgZm4gPSBpdCA9PiBpdCkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgY29tcGxldGVkID0gKCkgPT4KKCkgPT4KICByZXMgPT4KICBjb21wbGV0ZWQgPSAoKSA9PgogIHJlcyA9PgogIGFkZFRvYXN0KHRpdGxlLCBtZXNzYWdlLCB0dGwgPSA1MDAwKQpmdW5jdGlvbigpCiAgcmVtb3ZlVG9hc3QoZGVhZGxpbmUpCiAgdCA9PgogIHJlbW92ZVRvYXN0cygpAAAAAAAAAAA3AwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								80
							]
						],
						"symlist":
						[
							"Translate = ({value}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA3AwAAUm9vdFN0b3JlCiAgY29uc3RydWN0b3IoaW5pdGlhbERhdGEsIHBhZ2VQcm9wcykKICBjb25zdHJ1Y3RvcgogIC50b09iamVjdCA9IGZ1bmN0aW9uKCkKKFtrLCB2XSkgPT4KKCkgPT4KKCkgPT4KICBkaXNwb3NlciA9PgogIGdldCBhdXRoZW50aWNhdGVkKCkKICBzZXRBdXRoZW50aWNhdGlvbihjb29raWVzKQogIHVwZGF0ZVN0YXRlKG9iaikKICBzZXRTdGF0ZShvYmopCiAgbmV3UGhvdG8ocGhvdG9PYmopCigpID0+CiAgZ2V0UGhvdG8oaWQpCiAgcGhvdG9FeGlzdHMoaWQpCiAgY29tcGxldGVkID0gKCkgPT4KICByZXNwb25zZSA9PgogIGNvbXBsZXRlZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBnZXQgY3VycmVudFBob3RvKCkKICBnZXQgcm9vdEl0ZW0oKQogIGdldCByb290SXRlbUlkKCkKICBuZXdJdGVtKGl0ZW0pCiAgY2hpbGQgPT4KICBnZXRJdGVtKGlkLCB0ciwgaWRNYXAgPSBudWxsLCBkZXB0aCA9IDEwMDApCiAgZ2V0VHJlZShpZCwgdHIsIGlkTWFwID0gbnVsbCwgZGVwdGggPSAxMDAwKQppdCA9PgogIGkgPT4KICBjID0+CiAgaSA9PgogIGNoaWxkID0+CihtYXAgPSBudWxsKQogIG1hcCA9IGl0ZW0gPT4KICBub3RMb2FkZWRDaGlsZHJlbigpCiAgZ2V0SGllcmFyY2h5KGl0ZW0sIGZuID0gaXQgPT4gaXQpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIGNvbXBsZXRlZCA9ICgpID0+CigpID0+CiAgcmVzID0+CiAgY29tcGxldGVkID0gKCkgPT4KICByZXMgPT4KICBhZGRUb2FzdCh0aXRsZSwgbWVzc2FnZSwgdHRsID0gNTAwMCkKZnVuY3Rpb24oKQogIHJlbW92ZVRvYXN0KGRlYWRsaW5lKQogIHQgPT4KICByZW1vdmVUb2FzdHMoKQAAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								80
							]
						],
						"symlist":
						[
							"Translate = ({value}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAVHJhbnNsYXRlID0gKHt2YWx1ZX0pID0+AAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								80
							]
						],
						"symlist":
						[
							"Translate = ({value}) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAVHJhbnNsYXRlID0gKHt2YWx1ZX0pID0+AAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAFRyYW5zbGF0ZSA9ICh7dmFsdWV9KSA9PgAAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								80
							]
						],
						"symlist":
						[
							"Translate = ({value}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAVHJhbnNsYXRlID0gKHt2YWx1ZX0pID0+AAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								65
							],
							[
								68,
								99
							],
							[
								168,
								173
							],
							[
								175,
								259
							],
							[
								265,
								276
							],
							[
								278,
								329
							],
							[
								598,
								603
							],
							[
								605,
								689
							],
							[
								695,
								706
							],
							[
								708,
								759
							],
							[
								807,
								812
							],
							[
								814,
								898
							],
							[
								904,
								915
							],
							[
								917,
								968
							],
							[
								1014,
								1019
							],
							[
								1021,
								1104
							],
							[
								1110,
								1121
							],
							[
								1123,
								1173
							],
							[
								1239,
								1244
							],
							[
								1246,
								1332
							],
							[
								1338,
								1349
							],
							[
								1351,
								1537
							],
							[
								1582,
								1587
							],
							[
								1589,
								1674
							],
							[
								1680,
								1691
							],
							[
								1693,
								1745
							],
							[
								1789,
								1794
							],
							[
								1796,
								1880
							],
							[
								1886,
								1897
							],
							[
								1899,
								1950
							]
						],
						"symlist":
						[
							"Translate",
							"({value}) => <div>{value}</div>",
							"label",
							"() => ( <span> <Translate value='nav.home_name' /> </span> )",
							"description",
							"() => <Translate value='nav.home_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.show_name' /> </span> )",
							"description",
							"() => <Translate value='nav.show_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.tree_name' /> </span> )",
							"description",
							"() => <Translate value='nav.tree_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.new_name' /> </span> )",
							"description",
							"() => <Translate value='nav.new_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.logout_name' /> </span> )",
							"description",
							"props => ( <React.Fragment> <Translate value='nav.logout_description' />: {props.rootStore.auth.user && props.rootStore.auth.user.username} </React.Fragment> ) ",
							"label",
							"() => ( <span> <Translate value='nav.login_name' /> </span> )",
							"description",
							"() => <Translate value='nav.login_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.lang_name' /> </span> )",
							"description",
							"() => <Translate value='nav.lang_description' /> "
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAVHJhbnNsYXRlID0gKHt2YWx1ZX0pID0+AAAAAAAAAAA/BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BAAAVHJhbnNsYXRlCih7dmFsdWV9KSA9PiA8ZGl2Pnt2YWx1ZX08L2Rpdj4KICBsYWJlbAooKSA9PiAoIDxzcGFuPiA8VHJhbnNsYXRlIHZhbHVlPSduYXYuaG9tZV9uYW1lJyAvPiA8L3NwYW4+ICkKICBkZXNjcmlwdGlvbgooKSA9PiA8VHJhbnNsYXRlIHZhbHVlPSduYXYuaG9tZV9kZXNjcmlwdGlvbicgLz4gCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LnNob3dfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KKCkgPT4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LnNob3dfZGVzY3JpcHRpb24nIC8+IAogIGxhYmVsCigpID0+ICggPHNwYW4+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi50cmVlX25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi50cmVlX2Rlc2NyaXB0aW9uJyAvPiAKICBsYWJlbAooKSA9PiAoIDxzcGFuPiA8VHJhbnNsYXRlIHZhbHVlPSduYXYubmV3X25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5uZXdfZGVzY3JpcHRpb24nIC8+IAogIGxhYmVsCigpID0+ICggPHNwYW4+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5sb2dvdXRfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KICBwcm9wcyA9PiAoIDxSZWFjdC5GcmFnbWVudD4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxvZ291dF9kZXNjcmlwdGlvbicgLz46IHtwcm9wcy5yb290U3RvcmUuYXV0aC51c2VyICYmIHByb3BzLnJvb3RTdG9yZS5hdXRoLnVzZXIudXNlcm5hbWV9IDwvUmVhY3QuRnJhZ21lbnQ+ICkgCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxvZ2luX25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5sb2dpbl9kZXNjcmlwdGlvbicgLz4gCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxhbmdfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KKCkgPT4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxhbmdfZGVzY3JpcHRpb24nIC8+IAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwIAAAAAAACRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/wild-beauty/components/siteMap.js",
						"symkeys":
						[
							[
								56,
								65
							],
							[
								68,
								99
							],
							[
								168,
								173
							],
							[
								175,
								259
							],
							[
								265,
								276
							],
							[
								278,
								329
							],
							[
								598,
								603
							],
							[
								605,
								689
							],
							[
								695,
								706
							],
							[
								708,
								759
							],
							[
								807,
								812
							],
							[
								814,
								898
							],
							[
								904,
								915
							],
							[
								917,
								968
							],
							[
								1014,
								1019
							],
							[
								1021,
								1104
							],
							[
								1110,
								1121
							],
							[
								1123,
								1173
							],
							[
								1239,
								1244
							],
							[
								1246,
								1332
							],
							[
								1338,
								1349
							],
							[
								1351,
								1537
							],
							[
								1582,
								1587
							],
							[
								1589,
								1674
							],
							[
								1680,
								1691
							],
							[
								1693,
								1745
							],
							[
								1789,
								1794
							],
							[
								1796,
								1880
							],
							[
								1886,
								1897
							],
							[
								1899,
								1950
							]
						],
						"symlist":
						[
							"Translate",
							"({value}) => <div>{value}</div>",
							"label",
							"() => ( <span> <Translate value='nav.home_name' /> </span> )",
							"description",
							"() => <Translate value='nav.home_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.show_name' /> </span> )",
							"description",
							"() => <Translate value='nav.show_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.tree_name' /> </span> )",
							"description",
							"() => <Translate value='nav.tree_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.new_name' /> </span> )",
							"description",
							"() => <Translate value='nav.new_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.logout_name' /> </span> )",
							"description",
							"props => ( <React.Fragment> <Translate value='nav.logout_description' />: {props.rootStore.auth.user && props.rootStore.auth.user.username} </React.Fragment> ) ",
							"label",
							"() => ( <span> <Translate value='nav.login_name' /> </span> )",
							"description",
							"() => <Translate value='nav.login_description' /> ",
							"label",
							"() => ( <span> <Translate value='nav.lang_name' /> </span> )",
							"description",
							"() => <Translate value='nav.lang_description' /> "
						]
					},
					"AQAAAAAAAAAAAAAAPwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BAAAVHJhbnNsYXRlCih7dmFsdWV9KSA9PiA8ZGl2Pnt2YWx1ZX08L2Rpdj4KICBsYWJlbAooKSA9PiAoIDxzcGFuPiA8VHJhbnNsYXRlIHZhbHVlPSduYXYuaG9tZV9uYW1lJyAvPiA8L3NwYW4+ICkKICBkZXNjcmlwdGlvbgooKSA9PiA8VHJhbnNsYXRlIHZhbHVlPSduYXYuaG9tZV9kZXNjcmlwdGlvbicgLz4gCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LnNob3dfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KKCkgPT4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LnNob3dfZGVzY3JpcHRpb24nIC8+IAogIGxhYmVsCigpID0+ICggPHNwYW4+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi50cmVlX25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi50cmVlX2Rlc2NyaXB0aW9uJyAvPiAKICBsYWJlbAooKSA9PiAoIDxzcGFuPiA8VHJhbnNsYXRlIHZhbHVlPSduYXYubmV3X25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5uZXdfZGVzY3JpcHRpb24nIC8+IAogIGxhYmVsCigpID0+ICggPHNwYW4+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5sb2dvdXRfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KICBwcm9wcyA9PiAoIDxSZWFjdC5GcmFnbWVudD4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxvZ291dF9kZXNjcmlwdGlvbicgLz46IHtwcm9wcy5yb290U3RvcmUuYXV0aC51c2VyICYmIHByb3BzLnJvb3RTdG9yZS5hdXRoLnVzZXIudXNlcm5hbWV9IDwvUmVhY3QuRnJhZ21lbnQ+ICkgCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxvZ2luX25hbWUnIC8+IDwvc3Bhbj4gKQogIGRlc2NyaXB0aW9uCigpID0+IDxUcmFuc2xhdGUgdmFsdWU9J25hdi5sb2dpbl9kZXNjcmlwdGlvbicgLz4gCiAgbGFiZWwKKCkgPT4gKCA8c3Bhbj4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxhbmdfbmFtZScgLz4gPC9zcGFuPiApCiAgZGVzY3JpcHRpb24KKCkgPT4gPFRyYW5zbGF0ZSB2YWx1ZT0nbmF2LmxhbmdfZGVzY3JpcHRpb24nIC8+IAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "stores/EditorStore.js",
			"settings":
			{
				"buffer_size": 1839,
				"line_ending": "Unix"
			}
		},
		{
			"file": "stores/queries.js",
			"settings":
			{
				"buffer_size": 6592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACQKAAAAAAAAJQoAAAAAAAAAAAAAJQoAAAAAAAApCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkCgAAAAAAACQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApCgAAAAAAACkKAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/tree.js",
			"settings":
			{
				"buffer_size": 14067,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pages/tree.js",
			"settings":
			{
				"buffer_size": 26089,
				"line_ending": "Unix"
			}
		},
		{
			"file": "components/gallery.js",
			"settings":
			{
				"buffer_size": 7661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"paste",
					null,
					"AgAAAFwHAAAAAAAAbgcAAAAAAAAAAAAAbgcAAAAAAABuBwAAAAAAABIAAAAgQWxlYS5zaW5nbGV0b24oKTs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcBwAAAAAAAG4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFwHAAAAAAAAXQcAAAAAAAAAAAAAXQcAAAAAAABdBwAAAAAAAAMAAAAgPSA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcBwAAAAAAAF8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "1338"
					},
					"BQAAAGYHAAAAAAAAZwcAAAAAAAAAAAAAZwcAAAAAAABnBwAAAAAAAAQAAABzZWVkZwcAAAAAAABoBwAAAAAAAAAAAABoBwAAAAAAAGkHAAAAAAAAAAAAAGkHAAAAAAAAagcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAABAAAAOA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAGkHAAAAAAAAagcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAABAAAANg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAGkHAAAAAAAAagcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAABAAAAOA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAGkHAAAAAAAAagcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAABAAAANg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAAGkHAAAAAAAAagcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAABAAAANw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqBwAAAAAAAGoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "41"
					},
					"AgAAAGkHAAAAAAAAagcAAAAAAAAAAAAAagcAAAAAAABrBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					3,
					"left_delete",
					null,
					"AwAAAGoHAAAAAAAAagcAAAAAAAABAAAAMWkHAAAAAAAAaQcAAAAAAAABAAAANGgHAAAAAAAAaAcAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrBwAAAAAAAGsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "41"
					},
					"AgAAAGgHAAAAAAAAaQcAAAAAAAAAAAAAaQcAAAAAAABqBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBwAAAAAAAGgHAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/alea.js",
			"settings":
			{
				"buffer_size": 3138,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pages/test.js",
			"settings":
			{
				"buffer_size": 4964,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"",
					null,
					"AQAAAJ8CAAAAAAAAlwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAgAAAAAAAJ8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIEDAAAAAAAAggMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAwAAAAAAAIEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJcDAAAAAAAAmAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXAwAAAAAAAJcDAAAAAAAA////////738"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAHwDAAAAAAAAfAMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9AwAAAAAAAH0DAAAAAAAAAAAAAAAAAAA"
				],
				[
					62,
					24,
					"left_delete",
					null,
					"GAAAAHQDAAAAAAAAdAMAAAAAAAABAAAAZXMDAAAAAAAAcwMAAAAAAAABAAAAbHIDAAAAAAAAcgMAAAAAAAABAAAAZHEDAAAAAAAAcQMAAAAAAAABAAAAbnADAAAAAAAAcAMAAAAAAAABAAAAYW8DAAAAAAAAbwMAAAAAAAABAAAASG4DAAAAAAAAbgMAAAAAAAABAAAAaG0DAAAAAAAAbQMAAAAAAAABAAAAY2wDAAAAAAAAbAMAAAAAAAABAAAAdWsDAAAAAAAAawMAAAAAAAABAAAAb2oDAAAAAAAAagMAAAAAAAABAAAAdGkDAAAAAAAAaQMAAAAAAAABAAAAIGgDAAAAAAAAaAMAAAAAAAABAAAAc2cDAAAAAAAAZwMAAAAAAAABAAAAYWYDAAAAAAAAZgMAAAAAAAABAAAAIGUDAAAAAAAAZQMAAAAAAAABAAAAdGQDAAAAAAAAZAMAAAAAAAABAAAAbGMDAAAAAAAAYwMAAAAAAAABAAAAdWIDAAAAAAAAYgMAAAAAAAABAAAAYWEDAAAAAAAAYQMAAAAAAAABAAAAZmADAAAAAAAAYAMAAAAAAAABAAAAZV8DAAAAAAAAXwMAAAAAAAABAAAAZF4DAAAAAAAAXgMAAAAAAAABAAAAIF0DAAAAAAAAXQMAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AwAAAAAAAHUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"right_delete",
					null,
					"AQAAAF0DAAAAAAAAXQMAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdAwAAAAAAAF0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACKEwAAaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAicmVhY3QiOwppbXBvcnQgTGF5ZXIgZnJvbSAiLi4vY29tcG9uZW50cy9zaW1wbGUvbGF5ZXIuanMiOwppbXBvcnQgR2FsbGVyeSwgeyByYW5kb21JbWFnZVBhdGhzIH0gZnJvbSAiLi4vY29tcG9uZW50cy9nYWxsZXJ5LmpzIjsKaW1wb3J0IHsgU2Nyb2xsQ29udHJvbGxlciB9IGZyb20gIi4uL2xpYi9zY3JvbGxDb250cm9sbGVyLmpzIjsKaW1wb3J0IEFsZWEgZnJvbSAiLi4vbGliL2FsZWEuanMiOwppbXBvcnQgeyBTd2lwZVRyYWNrZXIgfSBmcm9tICIuLi9saWIvc3dpcGVUcmFja2VyLmpzIjsKaW1wb3J0IHsgTXVsdGl0b3VjaExpc3RlbmVyLCBNb3ZlbWVudExpc3RlbmVyIH0gZnJvbSAiLi4vbGliL3RvdWNoSGFuZGxlci5qcyI7CmltcG9ydCB7IGxhenlJbml0aWFsaXplciB9IGZyb20gIi4uL2xpYi9sYXp5SW5pdGlhbGl6ZXIuanMiOwppbXBvcnQgeyBTdmdPdmVybGF5IH0gZnJvbSAiLi4vbGliL3N2Zy9vdmVybGF5LmpzIjsKaW1wb3J0IHsgVG91Y2hDYWxsYmFjayB9IGZyb20gIi4uL2NvbXBvbmVudHMvVG91Y2hDYWxsYmFjay5qcyI7CmltcG9ydCBMYXlvdXQgZnJvbSAiLi4vY29tcG9uZW50cy9sYXlvdXQuanMiOwppbXBvcnQgeyBSYW5kb21Db2xvciB9IGZyb20gIi4uL3N0b3Jlcy9mdW5jdGlvbnMuanMiOwppbXBvcnQgeyBNb3ZlbWVudExpc3RlbmVyLCBNdWx0aXRvdWNoTGlzdGVuZXIsIFR1cm5MaXN0ZW5lciwgU2VsZWN0aW9uTGlzdGVuZXIsIFNlbGVjdGlvblJlbmRlcmVyLCBUb3VjaEV2ZW50cywgTW91c2VFdmVudHMsIGFkZFRvdWNoTGlzdGVuZXJzLCBhZGRNb3VzZUxpc3RlbmVycywgVG91Y2hMaXN0ZW5lciwgVG91Y2hIYW5kbGVyIH0gZnJvbSAnLi4vbGliL3RvdWNoSGFuZGxlci5qcyc7Cgpjb25zdCBnZXRQcm5nID0gKCkgPT4gQWxlYTsKY29uc3QgaW1hZ2VQYXRocyA9IGxhenlJbml0aWFsaXplcigoKSA9PiByYW5kb21JbWFnZVBhdGhzKCkpOwoKY29uc3QgVGVzdCA9ICgpID0+IHsKICBsZXQgc3dpcGVFdmVudHMgPSB7fTsKICB2YXIgZSA9IG51bGw7CgogIGlmKGdsb2JhbC53aW5kb3cgIT09IHVuZGVmaW5lZCkgd2luZG93LnBhZ2UgPSB0aGlzOwogIC8qCiAgdmFyIHNjcm9sbGluZyA9IG5ldyBTY3JvbGxDb250cm9sbGVyKCk7CgogIHZhciBzd2lwZVRyYWNrZXIgPSBuZXcgU3dpcGVUcmFja2VyKDEwLCBmdW5jdGlvbihldmVudCkgewogICAgY29uc29sZS5sb2coZXZlbnQudHlwZSsnOiAnLCBldmVudCk7CiAgfSk7CiAgc3dpcGVFdmVudHMgPSBzd2lwZVRyYWNrZXIuZXZlbnRzOwoqLwoKICBpZihnbG9iYWwud2luZG93KSB7CiAgICB2YXIgdG91Y2hMaXN0ZW5lciA9IFRvdWNoTGlzdGVuZXIoVG91Y2hDYWxsYmFjaywgewogICAgICBlbGVtZW50OiBnbG9iYWwud2luZG93LAogICAgICBzdGVwOiAxLAogICAgICByb3VuZDogdHJ1ZSwKICAgICAgbGlzdGVuZXI6IE1vdmVtZW50TGlzdGVuZXIsCiAgICAgIG5vc2Nyb2xsOiB0cnVlCiAgICB9KTsKICAgIHdpbmRvdy5kcmFnZ2VkID0gZTsKICAgIE11bHRpdG91Y2hMaXN0ZW5lcigKICAgICAgZXZlbnQgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCJtdWx0aXRvdWNoIiwgZXZlbnQpOwogICAgICB9LAogICAgICB7IGVsZW1lbnQ6IGdsb2JhbC53aW5kb3csIHN0ZXA6IDEsIHJvdW5kOiB0cnVlLCBsaXN0ZW5lcjogTW92ZW1lbnRMaXN0ZW5lciwgbm9zY3JvbGw6IHRydWUgfQogICAgKTsKICB9CgogIGNvbnN0IG9uRXJyb3IgPSBldmVudCA9PiB7fTsKICBjb25zdCBvbkltYWdlID0gZXZlbnQgPT4gewogICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQubmF0aXZlRXZlbnQudGFyZ2V0OwogICAgZG9jdW1lbnQuZm9ybXNbMF0uc3VibWl0KCk7CiAgICBjb25zb2xlLmxvZygib25DaGFuZ2U6ICIsIHZhbHVlKTsKICB9OwogIGNvbnN0IHN0YXRlID0gewogICAgaW1hZ2U6IHVzZVN0YXRlKCIiKSwKICAgIGVycm9yOiB1c2VTdGF0ZSgwKQogIH07CiAgbGV0IGxpc3QgPSBpbWFnZVBhdGhzKCk7CiAgaWYobGlzdCA9PT0gbnVsbCB8fCAobGlzdCAmJiBsaXN0Lmxlbmd0aCA9PSB1bmRlZmluZWQpKSBsaXN0ID0gWyJzdGF0aWMvaW1nLzg2NDYzZWQ4ZWQzOTFiZjZiMGEyOTA3ZGY3NGFkYjM3LmpwZyIsICJzdGF0aWMvaW1nLzhjYjNjNTM2NmNjODFiNWZlM2UwNjFhNjVmYmY0MDQ1LmpwZyIsICJzdGF0aWMvaW1nL2NkYjQ2NmE2OWNjNzk0NDgwOWIyMGU3ZjM0ODQwNDg2LmpwZyIsICJzdGF0aWMvaW1nL2U3NThlZTlhYWZiYzg0M2ExMTg5ZmY1NDZjNTZlNWI1LmpwZyIsICJzdGF0aWMvaW1nL2ZkY2NlODU2Y2Y2NmYzMzc4OWRjMzkzNDQxODExM2EyLmpwZyJdOwogIHJldHVybiAoCiAgICA8TGF5b3V0PgogICAgICB7LyogICAgPGZvcm0gYWN0aW9uPSJ1cGxvYWQiIG1ldGhvZD0iUE9TVCIgb25TdWJtaXQ9e2UgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfT4KICAgICAgICA8RHJvcHpvbmUgb25Ecm9wPXthY2NlcHRlZEZpbGVzID0+IGNvbnNvbGUubG9nKGFjY2VwdGVkRmlsZXMpfT4KICAgICAgICAgIHsoeyBnZXRSb290UHJvcHMsIGdldElucHV0UHJvcHMgfSkgPT4gKAogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICA8ZGl2IHsuLi5nZXRSb290UHJvcHMoKX0gc3R5bGU9e3sgd2lkdGg6ICIzMDBweCIsIGhlaWdodDogIjIwMHB4IiB9fT4KICAgICAgICAgICAgICAgIDxpbnB1dCB7Li4uZ2V0SW5wdXRQcm9wcygpfSBzdHlsZT17e319IG9uQ2hhbmdlPXtvbkltYWdlfSAvPgogICAgICAgICAgICAgICAgPHA+RHJhZyAnbicgZHJvcCBzb21lIGZpbGVzIGhlcmUsIG9yIGNsaWNrIHRvIHNlbGVjdCBmaWxlczwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICAgKX0KICAgICAgICA8L0Ryb3B6b25lPgogICAgICA8L2Zvcm0+Ki99CiAgICAgIDxHYWxsZXJ5IC8+CiAgICAgIDxkaXYKICAgICAgICBjbGFzc05hbWU9eyJwYW5lbHMifQogICAgICAgIHN0eWxlPXt7CiAgICAgICAgICBvdmVyZmxvdzogInZpc2libGUiLAogICAgICAgICAgZGlzcGxheTogImZsZXgiLAogICAgICAgICAgZmxleEZsb3c6ICJyb3cgd3JhcCIsCiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlLWFyb3VuZCIsCiAgICAgICAgICBhbGlnbkl0ZW1zOiAic3RyZXRjaCIsCiAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgIG1heFdpZHRoOiAiMTAwJSIsCiAgICAgICAgICBtYXhIZWlnaHQ6ICIxMDAlIgogICAgICAgIH19CiAgICAgID4KICAgICAgICB7bGlzdC5tYXAocGF0aCA9PiAoCiAgICAgICAgICA8TGF5ZXIgaW5saW5lIHN0eWxlPXt7IGZsZXg6ICIxIDAgYXV0byIsIGJhY2tncm91bmRDb2xvcjogUmFuZG9tQ29sb3IoKSB9fT4KICAgICAgICAgICAgPGltZyBzcmM9e3BhdGh9IHN0eWxlPXt7IG1heFdpZHRoOiAiNTB2bWluIiwgd2lkdGg6ICIxMDAlIiwgaGVpZ2h0OiAiYXV0byIgfX0gY2xhc3NOYW1lPSdnYWxsZXJ5LWltYWdlJyAvPgogICAgICAgICAgPC9MYXllcj4KICAgICAgICApKX0KICAgICAgPC9kaXY+CiAgICAgIDxMYXllciBjbGFzc05hbWU9eyJsYXllciJ9IHc9ezMwMH0gaD17IjMwMHB4In0gbWFyZ2luPXsxMH0gcGFkZGluZz17Mn0gYm9yZGVyPXsiMnB4IGRhc2hlZCByZWQifT4KICAgICAgICBMYXllcgogICAgICA8L0xheWVyPgogICAgICA8U3ZnT3ZlcmxheSAvPgogICAgICA8c3R5bGUganN4IGdsb2JhbD57YAogICAgICAgIC5tYWluLWxheW91dCB7CiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIH0KCiAgICAgICAgLmdhbGxlcnktaW1hZ2UgewogICAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgICAgIH0KCiAgICAgICAgLnBhbmVscyB7CiAgICAgICAgICBtYXJnaW46IDEwMHB4OwogICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7CiAgICAgICAgfQoKICAgICAgICBpbWcgewogICAgICAgICAgYm9yZGVyOiAwcHg7CiAgICAgICAgICBvdXRsaW5lOiAwcHg7CiAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICBtYXJnaW46IDBweDsKICAgICAgICB9CgogICAgICAgIC5wYW5lbHMgLmxheWVyIHsKICAgICAgICAgIG1hcmdpbjogMHB4OwogICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgIH0KCiAgICAgICAgLmxheW91dCB7CiAgICAgICAgICBtYXJnaW46IDBweDsKICAgICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgICAgfQoKICAgICAgICAucGFuZWxzID4gZGl2IHsKICAgICAgICAgIGZsZXg6IDEgMSBhdXRvOwogICAgICAgIH0KCiAgICAgICAgLmxheWVyID4gZGl2IHsKICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgLmxheWVyID4gZGl2IHsKICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgLmxheWVyLmRyYWdnaW5nIHsKICAgICAgICAgIG9wYWNpdHk6IDUwJTsKICAgICAgICB9CgogICAgICAgIC50aXRsZSB7CiAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgIHBhZGRpbmctdG9wOiA4MHB4OwogICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7CiAgICAgICAgICBmb250LXNpemU6IDQ4cHg7CiAgICAgICAgfQoKICAgICAgICAudGl0bGUsCiAgICAgICAgLmRlc2NyaXB0aW9uIHsKICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CgogICAgICAgIC5yb3cgewogICAgICAgICAgbWF4LXdpZHRoOiA4ODBweDsKICAgICAgICAgIG1hcmdpbjogODBweCBhdXRvIDQwcHg7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOwogICAgICAgIH0KICAgICAgYH08L3N0eWxlPgogICAgPC9MYXlvdXQ+CiAgKTsKfTsKCmV4cG9ydCBkZWZhdWx0IFRlc3Q7CgAAAAAAAAAAshMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRAwAAAAAAAF0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADsBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA8AQAAAAAAAE8AAABpbXBvcnQgeyBNdWx0aXRvdWNoTGlzdGVuZXIsIE1vdmVtZW50TGlzdGVuZXIgfSBmcm9tICIuLi9saWIvdG91Y2hIYW5kbGVyLmpzIjsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AQAAAAAAAIoBAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pages/_app.js",
			"settings":
			{
				"buffer_size": 9147,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					7,
					"join_lines",
					null,
					"EgAAAJkFAAAAAAAAmQUAAAAAAAABAAAACpkFAAAAAAAAmQUAAAAAAAAIAAAAICAgICAgICCqBQAAAAAAAKoFAAAAAAAAAQAAAAqqBQAAAAAAAKoFAAAAAAAACAAAACAgICAgICAgqgUAAAAAAACrBQAAAAAAAAAAAAC+BQAAAAAAAL4FAAAAAAAAAQAAAAq+BQAAAAAAAL4FAAAAAAAACgAAACAgICAgICAgICDvBQAAAAAAAO8FAAAAAAAAAQAAAArvBQAAAAAAAO8FAAAAAAAADAAAACAgICAgICAgICAgIPMFAAAAAAAA8wUAAAAAAAABAAAACvMFAAAAAAAA8wUAAAAAAAAMAAAAICAgICAgICAgICAg8wUAAAAAAAD0BQAAAAAAAAAAAABVBgAAAAAAAFUGAAAAAAAAAQAAAApVBgAAAAAAAFUGAAAAAAAADgAAACAgICAgICAgICAgICAgVQYAAAAAAABWBgAAAAAAAAAAAABwBgAAAAAAAHAGAAAAAAAAAQAAAApwBgAAAAAAAHAGAAAAAAAADgAAACAgICAgICAgICAgICAgcAYAAAAAAABxBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBQAAAAAAAJkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					3,
					"join_lines",
					null,
					"CQAAAH8GAAAAAAAAfwYAAAAAAAABAAAACn8GAAAAAAAAfwYAAAAAAAAKAAAAICAgICAgICAgIH8GAAAAAAAAgAYAAAAAAAAAAAAAggYAAAAAAACCBgAAAAAAAAEAAAAKggYAAAAAAACCBgAAAAAAAAgAAAAgICAgICAgIIIGAAAAAAAAgwYAAAAAAAAAAAAAhAYAAAAAAACEBgAAAAAAAAEAAAAKhAYAAAAAAACEBgAAAAAAAAYAAAAgICAgICCEBgAAAAAAAIUGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxBgAAAAAAAHEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAIQGAAAAAAAAhAYAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFBgAAAAAAAIUGAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAIIGAAAAAAAAggYAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDBgAAAAAAAIMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "()("
					},
					"AwAAAI0FAAAAAAAAjgUAAAAAAAAAAAAAjgUAAAAAAACPBQAAAAAAAAAAAACPBQAAAAAAAJAFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBQAAAAAAAI0FAAAAAAAAAAAAAAAAS0A"
				],
				[
					21,
					2,
					"left_delete",
					null,
					"AgAAAI8FAAAAAAAAjwUAAAAAAAABAAAAKI4FAAAAAAAAjgUAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQBQAAAAAAAJAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAI4FAAAAAAAAjwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOBQAAAAAAAI4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAI4FAAAAAAAAjgUAAAAAAAABAAAAKI0FAAAAAAAAjQUAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPBQAAAAAAAI8FAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAI0FAAAAAAAAjgUAAAAAAAAAAAAAjgUAAAAAAACPBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBQAAAAAAAI0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMgCAAAAAAAAyQIAAAAAAAAAAAAAyQIAAAAAAADKAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAgAAAAAAAMgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAEDAAAAAAAAAgMAAAAAAAAAAAAAAgMAAAAAAAAGAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"doxy_enter",
					null,
					"AgAAAMgCAAAAAAAAyQIAAAAAAAAAAAAAyQIAAAAAAADNAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAgAAAAAAAMgCAAAAAAAAAAAAAAAAQkA"
				],
				[
					44,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAgAAAAAAAM0CAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "server.js",
			"settings":
			{
				"buffer_size": 15592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAHgBAAAAAAAAeAEAAAAAAAAHAAAAZGVmYXVsdHcBAAAAAAAAdwEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAeAEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 183809,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "stores/RootStore.js",
			"settings":
			{
				"buffer_size": 12621,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPYmAAAAAAAA9yYAAAAAAAAAAAAA9yYAAAAAAAD7JgAAAAAAAAAAAAD7JgAAAAAAAP0mAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9iYAAAAAAAD2JgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "components/siteMap.js",
			"settings":
			{
				"buffer_size": 1980,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "stores/i18nStore.js",
			"settings":
			{
				"buffer_size": 3570,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "Build next.js",
	"build_system_choices":
	[
		[
			[
				[
					"Build next.js",
					""
				],
				[
					"Export next.js to static HTML",
					""
				],
				[
					"List",
					""
				],
				[
					"Run Puppetteer tests",
					""
				],
				[
					"Run next.js server in development mode",
					""
				],
				[
					"Run prettier on current file",
					""
				],
				[
					"Transpile MoonScript to Lua",
					""
				],
				[
					"Packages/NinjaBuild/ninja.sublime-build",
					""
				]
			],
			[
				"Build next.js",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"lebab",
				"Lebab: transform to ES6"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"schemeed",
				"SchemeEditor: Edit installed scheme"
			],
			[
				"scherme ed",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"repo",
				"Package Control: Add Repository"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sche",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"packag",
				"Package Control: List Unmanaged Packages"
			],
			[
				"list pa",
				"Package Control: List Packages"
			],
			[
				"packa",
				"PackageResourceViewer: Extract All Packages"
			],
			[
				"extra",
				"PackageResourceViewer: Extract Package"
			],
			[
				"scheme",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install pack",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 178.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/wild-beauty",
		"/home/roman/Projects/wild-beauty/build",
		"/home/roman/Projects/wild-beauty/components",
		"/home/roman/Projects/wild-beauty/pages",
		"/home/roman/Projects/wild-beauty/stores"
	],
	"file_history":
	[
		"/home/roman/Projects/wild-beauty/stores/functions.js",
		"/home/roman/wild-beauty/stores/queries.js",
		"/home/roman/Projects/wild-beauty/lib/dom/element.js",
		"/home/roman/Projects/wild-beauty/lib/devtools.js",
		"/home/roman/Projects/wild-beauty/imageConversion.js",
		"/home/roman/Projects/wild-beauty/components/upload/RUG.js",
		"/home/roman/wild-beauty/stores/api.js",
		"/home/roman/wild-beauty/stores/RootStore.js",
		"/home/roman/Projects/wild-beauty/lib/dom/preactComponent.js",
		"/home/roman/Projects/wild-beauty/components/simple/svgText.js",
		"/home/roman/Projects/wild-beauty/lib/dom/reactComponent.js",
		"/home/roman/Projects/wild-beauty/pages/show.js",
		"/home/roman/Projects/wild-beauty/pages/_app.js",
		"/home/roman/Projects/wild-beauty/pages/panes.js",
		"/home/roman/Projects/wild-beauty/pages/list.js",
		"/home/roman/Projects/wild-beauty/lib/trkl.js",
		"/home/roman/Projects/wild-beauty/query.js",
		"/home/roman/Projects/wild-beauty/stores/api.js",
		"/home/roman/Projects/wild-beauty/pages/browse.js",
		"/home/roman/Projects/wild-beauty/components/nav.js",
		"/home/roman/Projects/wild-beauty/static/html/bpgdec.js",
		"/home/roman/Projects/wild-beauty/static/wasm/bpgdec.wasm.js",
		"/home/roman/Projects/wild-beauty/server.js",
		"/home/roman/Projects/wild-beauty/lib/touchHandler.js",
		"/home/roman/Projects/wild-beauty/pages/new.js",
		"/home/roman/Projects/wild-beauty/components/views/imageUpload.js",
		"/home/roman/Projects/wild-beauty/pages/tree.js",
		"/home/roman/wild-beauty/pages/tree.js",
		"/home/roman/wild-beauty/pages/list.js",
		"/home/roman/Projects/wild-beauty/components/views/treeView.js",
		"/home/roman/Projects/wild-beauty/graphql-schema.json",
		"/home/roman/Projects/wild-beauty/.babelrc",
		"/home/roman/Projects/wild-beauty/stores/RootStore.js",
		"/home/roman/Projects/wild-beauty/stores/queries.js",
		"/home/roman/Projects/rsenn/wild-beauty/lib/dom/rect.js",
		"/home/roman/the-wild-beauty-company/pages/new.js",
		"/home/roman/the-wild-beauty-company/components/views/imageUpload.js",
		"/home/roman/Projects/rsenn/wild-beauty/lib/dom/line.js",
		"/home/roman/Projects/rsenn/wild-beauty/polyserver/delaunay.js",
		"/home/roman/wild-beauty/lib/dom/rect.js",
		"/home/roman/wild-beauty/pages/new/[photo_id].js",
		"/home/roman/wild-beauty/pages/new.js",
		"/home/roman/wild-beauty/README.md",
		"/home/roman/wild-beauty/components/views/draggableList.js",
		"/home/roman/wild-beauty/lib/touchHandler.js",
		"/home/roman/the-wild-beauty-company/lib/touchHandler.js",
		"/home/roman/wild-beauty/lib/lazyInitializer.js",
		"/home/roman/wild-beauty/components/views/imageUpload.js",
		"/home/roman/wild-beauty/components/upload/RUG.js",
		"/home/roman/wild-beauty/wild-beauty.sublime-project",
		"/home/roman/wild-beauty/package.json",
		"/home/roman/wild-beauty/lib/util.js",
		"/home/roman/wild-beauty/components/views/itemEditor.js",
		"/home/roman/the-wild-beauty-company/lib/util.js",
		"/home/roman/wild-beauty/pages/show/[id].js",
		"/home/roman/wild-beauty/lib/dom/point.js",
		"/home/roman/wild-beauty/lib/dom/line.js",
		"/home/roman/wild-beauty/lib/devtools.js",
		"/home/roman/wild-beauty/node_modules/@ampproject/toolbox-optimizer/lib/transformers/ServerSideRendering.js",
		"/home/roman/the-wild-beauty-company/components/views/itemEditor.js",
		"/home/roman/the-wild-beauty-company/pages/new/[photo_id].js",
		"/home/roman/wild-beauty/stores/EditorStore.js",
		"/home/roman/the-wild-beauty-company/node_modules/mobx/lib/mobx.module.js",
		"/home/roman/wild-beauty/lib/dom/svg.js",
		"/home/roman/wild-beauty/lib/dom/pointList.js",
		"/home/roman/wild-beauty/lib/dominate.essential.js",
		"/home/roman/wild-beauty/lib/dom.js",
		"/home/roman/wild-beauty/lib/dom/element.js",
		"/home/roman/wild-beauty/lib/dom/elementRect.js",
		"/home/roman/the-wild-beauty-company/pages/list.js",
		"/home/roman/wild-beauty/lib/svg/path.js",
		"/home/roman/wild-beauty/action-save-new.svg",
		"/home/roman/wild-beauty/test-path.js",
		"/home/roman/wild-beauty/lib/dom/timer.js",
		"/home/roman/wild-beauty/lib/svg/load.js",
		"/home/roman/wild-beauty/lib/svg/path-parser.js",
		"/home/roman/the-wild-beauty-company/node_modules/svg-path-parser/index.js",
		"/home/roman/the-wild-beauty-company/node_modules/svg-path-parser/parser.js",
		"/home/roman/the-wild-beauty-company/lib/dom/element.js",
		"/home/roman/the-wild-beauty-company/stores/RootStore.js",
		"/home/roman/the-wild-beauty-company/lib/dom/svg.js",
		"/home/roman/wild-beauty/lib/svg/path_parse.js",
		"/home/roman/the-wild-beauty-company/lib/dom/pointList.js",
		"/home/roman/wild-beauty/components/views/treeGraph.js",
		"/home/roman/wild-beauty/components/simple/svgText.js",
		"/home/roman/the-wild-beauty-company/lib/dom/rect.js",
		"/home/roman/wild-beauty/lib/dom/size.js",
		"/home/roman/the-wild-beauty-company/pages/tree.js",
		"/home/roman/wild-beauty/lib/alea.js",
		"/home/roman/wild-beauty/lib/fd-graph.js",
		"/home/roman/wild-beauty/lib/lua.js",
		"/home/roman/wild-beauty/stores/functions.js",
		"/home/roman/wild-beauty/test-alea.js",
		"/home/roman/the-wild-beauty-company/lib/fd-graph.js",
		"/home/roman/the-wild-beauty-company/pages/show.js",
		"/home/roman/wild-beauty/components/views/treeView.js",
		"/home/roman/the-wild-beauty-company/components/simple/svgText.js",
		"/home/roman/wild-beauty/components/layout.js",
		"/home/roman/wild-beauty/pages/_app.js",
		"/home/roman/the-wild-beauty-company/components/nav.js",
		"/home/roman/the-wild-beauty-company/pages/_app.js",
		"/home/roman/wild-beauty/components/nav.js",
		"/home/roman/the-wild-beauty-company/hyphenate.js",
		"/home/roman/the-wild-beauty-company/components/views/treeGraph.js",
		"/home/roman/wild-beauty/lib/dom/align.js",
		"/home/roman/wild-beauty/pages/show.js",
		"/home/roman/wild-beauty/pages/browse.js",
		"/home/roman/wild-beauty/lib/dom/bbox.js",
		"/home/roman/wild-beauty/components/graph.js",
		"/home/roman/the-wild-beauty-company/static/img/action-save-new.svg",
		"/home/roman/the-wild-beauty-company/static/img/icon-editbox-add.svg",
		"/home/roman/wild-beauty/components/simple/editableField.js",
		"/home/roman/wild-beauty/lib/devpane.js",
		"/home/roman/the-wild-beauty-company/pages/browse.js",
		"/home/roman/the-wild-beauty-company/icon-editbox-add.svg",
		"/home/roman/the-wild-beauty-company/action-save-new.svg",
		"/home/roman/wild-beauty/query.js",
		"/home/roman/wild-beauty/server.js",
		"/home/roman/wild-beauty/imageConversion.js",
		"/home/roman/wild-beauty/components/views/toastsContainer.js",
		"/home/roman/the-wild-beauty-company/components/simple/editableField.js",
		"/home/roman/the-wild-beauty-company/components/upload/RUG.js",
		"/home/roman/wild-beauty/components/upload/view/List.js",
		"/home/roman/wild-beauty/components/upload/view/Card.js",
		"/home/roman/the-wild-beauty-company/lib/dom/timer.js",
		"/home/roman/wild-beauty/server.log",
		"/home/roman/wild-beauty/lib/util.es5.js",
		"/home/roman/wild-beauty/pages/test.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 153.0,
		"where_history":
		[
			"/home/roman/Projects/wild-beauty,*.js,*.css,-*/.next/*",
			"/home/roman/Projects/wild-beauty,*.js,*.css",
			"/home/roman/Projects/wild-beauty,*.js,*.css,-*/lib/*",
			"/home/roman/wild-beauty,*.js,*.css,-*/lib/*",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,/home/roman/wild-beauty/static,*.js,*.css,-*/lib/*",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,/home/roman/wild-beauty/static,*.js,*.css",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,*.js",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,/home/roman/wild-beauty/*.js,*.js",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,/home/roman/wild-beauty,*.js",
			"/home/roman/wild-beauty/lib,/home/roman/wild-beauty/pages,/home/roman/wild-beauty/components,/home/roman/wild-beauty/stores,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"new_description",
			"lib/util",
			"mobxStore:",
			"App.*pageProp",
			"TouchHandler",
			"from",
			"HSLA",
			"new Alea",
			"a",
			"singleton",
			"Alea",
			"getInit",
			"apiRequest",
			"loadItems",
			"loadItems\\(",
			"loadItems",
			"rootStore\\.",
			"api",
			"api\\",
			"api\\.",
			"checkTag",
			"toChildArray",
			"to",
			"toChildArray",
			"toChildArra",
			"toChildArray",
			"removeLeafs",
			"RootStore.loadItems",
			"Queries",
			"import.*Queries",
			"Queries",
			"loadItems\\(",
			"loadItems",
			"RootStore.loadItems",
			"RootStore.loadItems ",
			"apiRequest",
			"center:",
			"console.*'center:",
			"console.*'center'",
			"'center'",
			"rootItem",
			"rootStore.getTr",
			"api\\.",
			"api.list",
			"http://wild-beauty.herokuapp.com/v1/graphql",
			"overflow: auto",
			": auto",
			"upload-card",
			"console.log.*RUG",
			"console.log.*__rec",
			"import.*trkl",
			"\"upload-card",
			"\\.upload-card",
			"function rec",
			"walkUp",
			"inside",
			"walk",
			"findAll",
			"SelectionRe",
			"upload",
			"receiveInstantiatedSource",
			"instantiateAsync",
			"wasmBinaryFile",
			"\\.wasm",
			"wasmBinaryFile",
			"instantiate",
			"wasmBinaryFile",
			"\\.wasm",
			"onSucc",
			"console.log",
			"log.*-entry",
			"mobile",
			"json",
			": Movement",
			"end.subs",
			"subscribe",
			"cancel",
			"MovementList",
			"cancel",
			"MovementListener",
			"SelectionListener",
			"SelectionLis",
			"defineGetter",
			"definenGetter",
			"toObject",
			"toObject = ",
			"toObject",
			"Util[^ ]*bject",
			"entries =",
			"fromEntries =",
			"fromEntries",
			"No image",
			"toStrinng",
			"match =",
			"extendArray =",
			"extendArray",
			"\\.last =",
			"last =",
			"\"last\"",
			"defineGetterSetter",
			"defineGetterSetter =",
			"extend",
			"last",
			"filter =",
			"Util.filter",
			"Util.foreach",
			"traverse",
			"filter =",
			"walkTree",
			"makeTree",
			"Tree value",
			"Tree.value",
			"parent",
			"trbl",
			"move",
			"move\\(",
			"removeEqual",
			"toHash",
			"ElementRectProxy",
			"position",
			"equal",
			"tmp√º",
			"toString",
			" !",
			"PointList",
			".add =",
			"line_iter",
			"Polyline"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"../lib/svg/overlay.js",
			"  ",
			"Util.\\1 = \\2 => { return \\3 }",
			"",
			"linearGradient",
			"",
			"* DEG2RAD",
			"editing",
			"",
			"api/photo/upload",
			"react-sortable-hoc",
			"prop-types",
			"",
			"icon-edit-",
			"entries",
			"",
			"sep",
			"newData",
			"",
			"imageImport",
			"\\2\\1",
			"\\1",
			"//console.log",
			"TreePage.",
			"\"Transition ",
			"Timer.std"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": false,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline.hidden-tmTheme",
							"current_file": null,
							"function_name_status_row": 20,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978461.06,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "stores/EditorStore.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1839,
						"regions":
						{
						},
						"selection":
						[
							[
								1515,
								1526
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 77,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679704834.65,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 865.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "stores/queries.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6592,
						"regions":
						{
						},
						"selection":
						[
							[
								2601,
								2601
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 90,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705023.43,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1037.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/tree.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14067,
						"regions":
						{
						},
						"selection":
						[
							[
								503,
								506
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705029.13,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pages/tree.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26089,
						"regions":
						{
						},
						"selection":
						[
							[
								6393,
								6393
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 214,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705140.31,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2856.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "components/gallery.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7661,
						"regions":
						{
						},
						"selection":
						[
							[
								1898,
								1898
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 55,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705294.95,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/alea.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3138,
						"regions":
						{
						},
						"selection":
						[
							[
								36,
								40
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705258.68,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pages/test.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4964,
						"regions":
						{
						},
						"selection":
						[
							[
								316,
								316
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 6,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705470.3,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pages/_app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9147,
						"regions":
						{
							"col_00000001":
							{
								"flags": 16,
								"regions":
								[
									[
										6601,
										6617
									]
								],
								"scope": "col_00000001"
							},
							"col_00000001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00000001_circle.png",
								"regions":
								[
									[
										6560,
										6560
									]
								],
								"scope": "col_gutter"
							},
							"col_00000099":
							{
								"flags": 16,
								"regions":
								[
									[
										8467,
										8485
									]
								],
								"scope": "col_00000099"
							},
							"col_00000099_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00000099_circle.png",
								"regions":
								[
									[
										8427,
										8427
									]
								],
								"scope": "col_gutter"
							},
							"col_0000009E":
							{
								"flags": 16,
								"regions":
								[
									[
										8916,
										8935
									]
								],
								"scope": "col_0000009E"
							},
							"col_0000009E_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000009E_circle.png",
								"regions":
								[
									[
										8875,
										8875
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										8703,
										8707
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										8684,
										8684
									]
								],
								"scope": "col_gutter"
							},
							"col_555555FF":
							{
								"flags": 16,
								"regions":
								[
									[
										7484,
										7491
									]
								],
								"scope": "col_555555FF"
							},
							"col_555555FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_555555FF_circle.png",
								"regions":
								[
									[
										7453,
										7453
									]
								],
								"scope": "col_gutter"
							},
							"col_8D8D8DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										7697,
										7704
									],
									[
										7816,
										7823
									],
									[
										8012,
										8019
									],
									[
										8219,
										8226
									]
								],
								"scope": "col_8D8D8DFF"
							},
							"col_8D8D8DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_8D8D8DFF_circle.png",
								"regions":
								[
									[
										7601,
										7601
									],
									[
										7712,
										7712
									],
									[
										7913,
										7913
									],
									[
										8205,
										8205
									]
								],
								"scope": "col_gutter"
							},
							"col_AAAAAAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										7907,
										7911
									]
								],
								"scope": "col_AAAAAAFF"
							},
							"col_AAAAAAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_AAAAAAFF_circle.png",
								"regions":
								[
									[
										7877,
										7877
									]
								],
								"scope": "col_gutter"
							},
							"col_C8C8C8FF":
							{
								"flags": 16,
								"regions":
								[
									[
										7684,
										7691
									],
									[
										7803,
										7810
									],
									[
										7999,
										8006
									],
									[
										8192,
										8199
									]
								],
								"scope": "col_C8C8C8FF"
							},
							"col_C8C8C8FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C8C8C8FF_circle.png",
								"regions":
								[
									[
										7601,
										7601
									],
									[
										7712,
										7712
									],
									[
										7913,
										7913
									],
									[
										8178,
										8178
									]
								],
								"scope": "col_gutter"
							},
							"col_DCDCDCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										7658,
										7665
									],
									[
										7671,
										7678
									],
									[
										7777,
										7784
									],
									[
										7790,
										7797
									],
									[
										7973,
										7980
									],
									[
										7986,
										7993
									],
									[
										8138,
										8145
									],
									[
										8165,
										8172
									]
								],
								"scope": "col_DCDCDCFF"
							},
							"col_DCDCDCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DCDCDCFF_circle.png",
								"regions":
								[
									[
										7601,
										7601
									],
									[
										7712,
										7712
									],
									[
										7913,
										7913
									],
									[
										8124,
										8124
									],
									[
										8151,
										8151
									]
								],
								"scope": "col_gutter"
							},
							"col_F0F0F0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										7646,
										7653
									],
									[
										7765,
										7772
									],
									[
										7961,
										7968
									],
									[
										8112,
										8119
									]
								],
								"scope": "col_F0F0F0FF"
							},
							"col_F0F0F0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F0F0F0FF_circle.png",
								"regions":
								[
									[
										7601,
										7601
									],
									[
										7712,
										7712
									],
									[
										7913,
										7913
									],
									[
										8098,
										8098
									]
								],
								"scope": "col_gutter"
							},
							"col_F3C500FF":
							{
								"flags": 16,
								"regions":
								[
									[
										8667,
										8676
									]
								],
								"scope": "col_F3C500FF"
							},
							"col_F3C500FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F3C500FF_circle.png",
								"regions":
								[
									[
										8602,
										8602
									]
								],
								"scope": "col_gutter"
							},
							"col_FFDA15FF":
							{
								"flags": 16,
								"regions":
								[
									[
										8653,
										8662
									]
								],
								"scope": "col_FFDA15FF"
							},
							"col_FFDA15FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFDA15FF_circle.png",
								"regions":
								[
									[
										8602,
										8602
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								717,
								717
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 20,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679705736.81,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15592,
						"regions":
						{
						},
						"selection":
						[
							[
								1328,
								1328
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 35,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978256.12,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 183809,
						"regions":
						{
							"col_000000CC":
							{
								"flags": 16,
								"regions":
								[
									[
										47748,
										47763
									]
								],
								"scope": "col_000000CC"
							},
							"col_000000CC_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000000CC_circle.png",
								"regions":
								[
									[
										47685,
										47685
									]
								],
								"scope": "col_gutter"
							},
							"col_000050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134206,
										134217
									]
								],
								"scope": "col_000050FF"
							},
							"col_000050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000050FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_0000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134334,
										134346
									]
								],
								"scope": "col_0000A0FF"
							},
							"col_0000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000A0FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_005000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134175,
										134186
									]
								],
								"scope": "col_005000FF"
							},
							"col_005000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_005050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134237,
										134249
									]
								],
								"scope": "col_005050FF"
							},
							"col_005050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005050FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_00A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134300,
										134312
									]
								],
								"scope": "col_00A000FF"
							},
							"col_00A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_00A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134368,
										134382
									]
								],
								"scope": "col_00A0A0FF"
							},
							"col_00A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A0A0FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										48186,
										48191
									],
									[
										124376,
										124381
									],
									[
										134146,
										134156
									],
									[
										134270,
										134280
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										47993,
										47993
									],
									[
										124337,
										124337
									],
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_4444DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										47799,
										47806
									]
								],
								"scope": "col_4444DDFF"
							},
							"col_4444DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4444DDFF_circle.png",
								"regions":
								[
									[
										47685,
										47685
									]
								],
								"scope": "col_gutter"
							},
							"col_500000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134160,
										134171
									]
								],
								"scope": "col_500000FF"
							},
							"col_500000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_500050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134221,
										134233
									]
								],
								"scope": "col_500050FF"
							},
							"col_500050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500050FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_505000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134190,
										134202
									]
								],
								"scope": "col_505000FF"
							},
							"col_505000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_505050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134253,
										134266
									]
								],
								"scope": "col_505050FF"
							},
							"col_505050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505050FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_7FFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										121195,
										121205
									]
								],
								"scope": "col_7FFFFFFF"
							},
							"col_7FFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7FFFFFFF_circle.png",
								"regions":
								[
									[
										121180,
										121180
									]
								],
								"scope": "col_gutter"
							},
							"col_A00000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134284,
										134296
									]
								],
								"scope": "col_A00000FF"
							},
							"col_A00000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A00000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_A000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134350,
										134364
									]
								],
								"scope": "col_A000A0FF"
							},
							"col_A000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A000A0FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134316,
										134330
									]
								],
								"scope": "col_A0A000FF"
							},
							"col_A0A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A000FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										134386,
										134402
									]
								],
								"scope": "col_A0A0A0FF"
							},
							"col_A0A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A0A0FF_circle.png",
								"regions":
								[
									[
										134127,
										134127
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										120959,
										120969
									],
									[
										124383,
										124388
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										120906,
										120906
									],
									[
										124337,
										124337
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								1796,
								1796
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 48,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978341.33,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "stores/RootStore.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12621,
						"regions":
						{
						},
						"selection":
						[
							[
								9993,
								10003
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 352,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978412.98,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5222.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "components/siteMap.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1980,
						"regions":
						{
						},
						"selection":
						[
							[
								1151,
								1166
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 52,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978469.4,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 646.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "stores/i18nStore.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3570,
						"regions":
						{
						},
						"selection":
						[
							[
								432,
								432
							]
						],
						"settings":
						{
							"function_name_status_row": 15,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1724978744.62,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 57.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.760675143555,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Lebab_Warning":
	{
		"height": 140.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 252.0
	},
	"output.unsaved_changes":
	{
		"height": 134.0
	},
	"pinned_build_system": "",
	"project": "wild-beauty.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"rootS",
				"stores/RootStore.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"gallery",
				"components/gallery.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"pages/tree",
				"pages/tree.js"
			],
			[
				"tree.js",
				"lib/tree.js"
			],
			[
				"queries",
				"stores/queries.js"
			],
			[
				"react",
				"lib/dom/reactComponent.js"
			],
			[
				"treeView",
				"components/views/treeView.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"reactcom",
				"lib/dom/reactComponent.js"
			],
			[
				"show.js",
				"pages/show.js"
			],
			[
				"treeVi",
				"components/views/treeView.js"
			],
			[
				"nav.js",
				"components/nav.js"
			],
			[
				"trkl",
				"lib/trkl.js"
			],
			[
				"devtoo",
				"lib/devtools.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"imageConv",
				"imageConversion.js"
			],
			[
				"Eleme",
				"lib/dom/element.js"
			],
			[
				"eleme",
				"lib/dom/element.js"
			],
			[
				"rect",
				"lib/dom/rect.js"
			],
			[
				"rect.js",
				"lib/dom/rect.js"
			],
			[
				"",
				"lib/dom/element.js"
			],
			[
				"lin",
				"lib/dom/line.js"
			],
			[
				"bpgdec.wasm.js",
				"static/wasm/bpgdec.wasm.js"
			],
			[
				"bpgdec",
				"static/html/bpgdec.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"new.js",
				"pages/new.js"
			],
			[
				"README",
				"README.md"
			],
			[
				"new",
				"pages/new.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"line",
				"lib/dom/line.js"
			],
			[
				"editorSt",
				"stores/EditorStore.js"
			],
			[
				"pointList",
				"lib/dom/pointList.js"
			],
			[
				"poin",
				"lib/dom/pointList.js"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"rootSt",
				"stores/RootStore.js"
			],
			[
				"action-save",
				"action-save-new.svg"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"point.js",
				"lib/dom/point.js"
			],
			[
				"svg.j",
				"lib/dom/svg.js"
			],
			[
				"elementRec",
				"lib/dom/elementRect.js"
			],
			[
				"elemen",
				"lib/dom/element.js"
			],
			[
				"point",
				"lib/dom/point.js"
			],
			[
				"size.js",
				"lib/dom/size.js"
			],
			[
				"alea.js",
				"lib/alea.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"test-alea",
				"test-alea.js"
			],
			[
				"test-al",
				"test-alea.js"
			],
			[
				"func",
				"stores/functions.js"
			],
			[
				"treeV",
				"components/views/treeView.js"
			],
			[
				"size",
				"lib/dom/size.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"line.js",
				"lib/dom/line.js"
			],
			[
				"rect.",
				"lib/dom/rect.js"
			],
			[
				"treeGra",
				"components/views/treeGraph.js"
			],
			[
				"tree.s",
				"pages/tree.js"
			],
			[
				"bbox",
				"lib/dom/bbox.js"
			],
			[
				"tree",
				"pages/tree.js"
			],
			[
				"_app",
				"pages/_app.js"
			],
			[
				"api",
				"stores/api.js"
			],
			[
				"browse",
				"pages/browse.js"
			],
			[
				"query.js",
				"query.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"api.j",
				"stores/api.js"
			],
			[
				"quer",
				"stores/queries.js"
			],
			[
				"toast",
				"components/views/toastsContainer.js"
			],
			[
				"_app.js",
				"pages/_app.js"
			],
			[
				"RUG",
				"components/upload/RUG.js"
			],
			[
				"imageC",
				"imageConversion.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"api.",
				"stores/api.js"
			],
			[
				"upload",
				"components/views/imageUpload.js"
			],
			[
				"imageUp",
				"components/views/imageUpload.js"
			],
			[
				"api.js",
				"stores/api.js"
			],
			[
				"layer.js",
				"lib/dom/layer.js"
			],
			[
				"index.",
				"lib/index.js"
			],
			[
				"devpa",
				"lib/devpane.js"
			],
			[
				"eagle.js",
				"lib/eagle.js"
			],
			[
				"lua.js",
				"lib/lua.js"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"circ",
				"components/simple/circleSegment.js"
			],
			[
				"elem",
				"lib/dom/element.js"
			],
			[
				"_app.j",
				"pages/_app.js"
			],
			[
				"editableF",
				"components/simple/editableField.js"
			],
			[
				"RootSt",
				"stores/RootStore.js"
			],
			[
				"imageCon",
				"imageConversion.js"
			],
			[
				"style.css",
				"static/style.css"
			],
			[
				"index",
				"pages/index.js"
			],
			[
				"iteme",
				"components/views/itemEditor.js"
			],
			[
				"itemed",
				"components/views/itemEditor.js"
			],
			[
				"point.j",
				"lib/dom/point.js"
			],
			[
				"test-c",
				"test-color.js"
			],
			[
				"test-pa",
				"test-path.js"
			],
			[
				"hsla",
				"lib/dom/hsla.js"
			],
			[
				"rgba",
				"lib/dom/rgba.js"
			],
			[
				"test-co",
				"test-color.js"
			],
			[
				"imageUo",
				"components/views/imageUpload.js"
			],
			[
				"RUG.js",
				"components/upload/RUG.js"
			],
			[
				"List.js",
				"components/upload/view/List.js"
			],
			[
				"imageU",
				"components/views/imageUpload.js"
			],
			[
				"arc.",
				"arc.svg"
			],
			[
				"svg-pat",
				"lib/svg-path.js"
			],
			[
				"arc.sv",
				"arc.svg"
			],
			[
				"test.sv",
				"test.svg"
			],
			[
				"roo",
				"stores/RootStore.js"
			],
			[
				"new.j",
				"pages/new.js"
			],
			[
				"query",
				"query.js"
			],
			[
				"axios",
				"lib/axios.js"
			],
			[
				"nav",
				"components/nav.js"
			],
			[
				"itemEd",
				"components/views/itemEditor.js"
			],
			[
				"RootS",
				"stores/RootStore.js"
			],
			[
				"rootst",
				"stores/RootStore.js"
			],
			[
				"devtool",
				"lib/devtools.js"
			],
			[
				"editable",
				"components/simple/editableField.js"
			],
			[
				"editab",
				"components/simple/editableField.js"
			],
			[
				"editableFie",
				"components/simple/editableField.js"
			],
			[
				"Edit",
				"components/simple/editableField.js"
			],
			[
				"devtools.",
				"lib/devtools.js"
			],
			[
				"RootStore",
				"stores/RootStore.js"
			],
			[
				"addIte",
				"components/views/addItemBar.js"
			],
			[
				"server.j",
				"server.js"
			],
			[
				"lay",
				"components/layout.js"
			],
			[
				"layout",
				"components/layout.js"
			],
			[
				"siteMap",
				"components/siteMap.js"
			],
			[
				"react-up",
				"static/css/react-upload-gallery.css"
			],
			[
				"upload.js",
				"components/upload.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
