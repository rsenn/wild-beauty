import _extends from '@babel/runtime/helpers/esm/extends'
import React from 'react'
import PropTypes from 'prop-types'
import Events from '@render-props/events'
import Throttle from '@render-props/throttle'
import {rect} from './utils'
/**
import Rect from '@render-props/rect'

<Rect>
  ({rectRef, recalcRect, top, right, bottom, left, width, height}) => (
    <div ref={rectRef}>
      <div>
        My width: {width}
      </div>
      <div>
        My height: {height}
      </div>
      <div>
        My pos: {JSON.stringify({top, right, bottom, left})}
      </div>
    </div>
  )
</Rect>
*/

class Rect_ extends React.Component {
  constructor(props) {
    super(props)
    this.element = null

    this.rectRef = el => {
      if (el !== null && el !== this.element) {
        this.element = el
        this.recalcRect()
      }
    }

    this.recalcRect = () => this.props.throttleState(rect(this.element))

    this.getRect = () => this.props.state

    this.rectContext = {
      rectRef: this.rectRef,
      recalcRect: this.recalcRect,
    }
  }

  componentDidMount() {
    if (this.props.recalcOnWindowResize && typeof window !== 'undefined') {
      this.props.addEvent(window, 'resize', this.recalcRect)
      this.props.addEvent(window, 'orientationchange', this.recalcRect)
    }
  }

  render() {
    const props = this.rectContext

    if (this.props.withCoords === true) {
      props.top = this.props.state.top
      props.right = this.props.state.right
      props.bottom = this.props.state.bottom
      props.left = this.props.state.left
      props.width = this.props.state.width
      props.height = this.props.state.height
    } else {
      props.getRect = this.getRect
    }

    return this.props.children(props)
  }
}

Rect_.displayName = 'Rect'
Rect_.propTypes = {
  children: PropTypes.func.isRequired,
  recalcOnWindowResize: PropTypes.bool,
  withCoords: PropTypes.bool,
}
Rect_.defaultProps = {
  recalcOnWindowResize: true,
  withCoords: true,
}
export default function Rect(props) {
  return React.createElement(Events, null, function(eventsContext) {
    return React.createElement(Throttle, null, function(throttleContext) {
      return React.createElement(
        Rect_,
        _extends({}, eventsContext, throttleContext, props)
      )
    })
  })
}
