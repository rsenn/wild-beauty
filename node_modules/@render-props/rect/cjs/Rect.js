'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = Rect

var _extends2 = _interopRequireDefault(
  require('@babel/runtime/helpers/extends')
)

var _react = _interopRequireDefault(require('react'))

var _propTypes = _interopRequireDefault(require('prop-types'))

var _events = _interopRequireDefault(require('@render-props/events'))

var _throttle = _interopRequireDefault(require('@render-props/throttle'))

var _utils = require('./utils')

/**
import Rect from '@render-props/rect'

<Rect>
  ({rectRef, recalcRect, top, right, bottom, left, width, height}) => (
    <div ref={rectRef}>
      <div>
        My width: {width}
      </div>
      <div>
        My height: {height}
      </div>
      <div>
        My pos: {JSON.stringify({top, right, bottom, left})}
      </div>
    </div>
  )
</Rect>
*/
class Rect_ extends _react.default.Component {
  constructor(props) {
    super(props)
    this.element = null

    this.rectRef = el => {
      if (el !== null && el !== this.element) {
        this.element = el
        this.recalcRect()
      }
    }

    this.recalcRect = () =>
      this.props.throttleState((0, _utils.rect)(this.element))

    this.getRect = () => this.props.state

    this.rectContext = {
      rectRef: this.rectRef,
      recalcRect: this.recalcRect,
    }
  }

  componentDidMount() {
    if (this.props.recalcOnWindowResize && typeof window !== 'undefined') {
      this.props.addEvent(window, 'resize', this.recalcRect)
      this.props.addEvent(window, 'orientationchange', this.recalcRect)
    }
  }

  render() {
    const props = this.rectContext

    if (this.props.withCoords === true) {
      props.top = this.props.state.top
      props.right = this.props.state.right
      props.bottom = this.props.state.bottom
      props.left = this.props.state.left
      props.width = this.props.state.width
      props.height = this.props.state.height
    } else {
      props.getRect = this.getRect
    }

    return this.props.children(props)
  }
}

Rect_.displayName = 'Rect'
Rect_.propTypes = {
  children: _propTypes.default.func.isRequired,
  recalcOnWindowResize: _propTypes.default.bool,
  withCoords: _propTypes.default.bool,
}
Rect_.defaultProps = {
  recalcOnWindowResize: true,
  withCoords: true,
}

function Rect(props) {
  return _react.default.createElement(_events.default, null, function(
    eventsContext
  ) {
    return _react.default.createElement(_throttle.default, null, function(
      throttleContext
    ) {
      return _react.default.createElement(
        Rect_,
        (0, _extends2.default)({}, eventsContext, throttleContext, props)
      )
    })
  })
}
