import _extends from '@babel/runtime/helpers/esm/extends'
import React from 'react'
import PropTypes from 'prop-types'
import Events from '@render-props/events'
import {throttle} from '@render-props/throttle'
import {getSize, getAspect} from './utils'
import {win} from './statics'
/**
<ViewportSize>
  {
    ({width, height}) => (
      <Row>
        <Col x={8}>viewport width: {width}</Col>
        <Col x={8}>viewport height: {height}</Col>
      </Row>
    )
  }
</ViewportSize>
**/

export class ViewportSize_ extends React.Component {
  constructor(...args) {
    super(...args)
    this.setSize = throttle(() => this.forceUpdate())
  }

  componentDidMount() {
    this.props.addEvent(win, 'resize', this.setSize)
    this.props.addEvent(win, 'orientationchange', this.setSize)
  }

  componentWillUnmount() {
    this.setSize.cancel()
  }

  render() {
    let props

    if (this.props.withCoords) {
      props = getSize()
      props.aspect = getAspect(win)
    } else {
      props = {
        getAspect,
        getSize,
      }
    }

    return this.props.children(props)
  }
}
ViewportSize_.displayName = 'ViewportSize'
ViewportSize_.propTypes = {
  children: PropTypes.func.isRequired,
  withCoords: PropTypes.bool,
}
ViewportSize_.defaultProps = {
  withCoords: true,
}
export default function ViewportSize(props) {
  return React.createElement(Events, null, function(eventsContext) {
    return React.createElement(
      ViewportSize_,
      _extends({}, eventsContext, {
        withCoords: props.withCoords,
        children: props.children,
      })
    )
  })
}
