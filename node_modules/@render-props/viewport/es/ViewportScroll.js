import _extends from '@babel/runtime/helpers/esm/extends'
import React from 'react'
import PropTypes from 'prop-types'
import Events from '@render-props/events'
import {throttle} from '@render-props/throttle'
import {getDistance, getDirection, scrollTo} from '@render-props/scrollable'
import {win} from './statics'
/**
<ViewportScroll withCoords={true}>
  {
    ({scrollX, scrollY, scrollTo}) => (
      <Row>
        <Col x={4}>scrollX: {scrollX}</Col>
        <Col x={4}>scrollY: {scrollY}</Col>
        <Col x={8}>
          scrollTo
          <input
            type='number'
            min={0}
            value={scrollY}
            onChange={e => scrollTo(0, e.target.value)}
          />
        </Col>
      </Row>
    )
  }
</ViewportScroll>
**/

const getScroll = () => {
  return {
    scrollX:
      win.scrollX !== void 0
        ? win.scrollX
        : win.pageXOffset === void 0
        ? 0
        : win.pageXOffset,
    scrollY:
      win.scrollY !== void 0
        ? win.scrollY
        : win.pageYOffset === void 0
        ? 0
        : win.pageYOffset,
  }
}

function _ref(x, y, opt) {
  if (typeof opt !== 'object') {
    win.scrollTo(x, y)
  } else {
    const currentPos = getScroll()
    scrollTo(
      win,
      {
        x: currentPos.scrollX,
        y: currentPos.scrollY,
      },
      {
        x,
        y,
      },
      opt
    )
  }
}

export class ViewportScroll_ extends React.Component {
  constructor(props) {
    super(props)
    this.scrollTo = _ref
    this.setScroll = throttle(() => this.forceUpdate())
    this.viewportScrollContext = {
      scrollTo: this.scrollTo,
    }
    this.prevState = null
  }

  componentDidMount() {
    this.props.addEvent(win, 'scroll', this.setScroll)
  }

  componentWillUnmount() {
    this.setScroll.cancel()
  }

  render() {
    const scroll = getScroll()
    const prevState = this.prevState

    function _ref2() {
      return getDistance(prevState, scroll)
    }

    function _ref3() {
      return getDirection(prevState, scroll)
    }

    if (this.props.withCoords === true) {
      this.viewportScrollContext.scrollX = scroll.scrollX
      this.viewportScrollContext.scrollY = scroll.scrollY
      const distance = getDistance(
        prevState || this.viewportScrollContext,
        scroll
      )
      const direction = getDirection(
        prevState || this.viewportScrollContext,
        scroll
      )
      this.viewportScrollContext.distance = distance
      this.viewportScrollContext.direction = direction
      scroll.distance = distance
      scroll.direction = direction
    } else {
      this.viewportScrollContext.getScroll = getScroll
      this.viewportScrollContext.getDistance = _ref2
      this.viewportScrollContext.getDirection = _ref3
    }

    this.prevState = scroll
    return this.props.children(this.viewportScrollContext)
  }
}
ViewportScroll_.displayName = 'ViewportScroll'
ViewportScroll_.propTypes = {
  children: PropTypes.func.isRequired,
  withCoords: PropTypes.bool,
}
ViewportScroll_.defaultProps = {
  withCoords: true,
}
export default function ViewportScroll(props) {
  return React.createElement(Events, null, function(eventsContext) {
    return React.createElement(
      ViewportScroll_,
      _extends({}, eventsContext, {
        withCoords: props.withCoords,
        children: props.children,
      })
    )
  })
}
