'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = Viewport

var _react = _interopRequireDefault(require('react'))

var _propTypes = _interopRequireDefault(require('prop-types'))

var _ViewportOrientation = _interopRequireDefault(
  require('./ViewportOrientation')
)

var _ViewportScroll = _interopRequireDefault(require('./ViewportScroll'))

/**
<Viewport>
  {
    ({
      width,
      height,
      aspect,
      scrollX,
      scrollY,
      scrollTo,
    }) => (
      <div>
        width?
        {width}

        height?
        {height}

        scrollY?
        {scrollY}

        aspect?
        {aspect}
      </div>
    )
  }
</Viewport>
**/
function Viewport(props) {
  // should be safely mutable because there aren't variable state keys
  // and we are localizing it to this component
  //
  // viewportQueriesContext provides: inView, inFullView, etc.
  const mutableContext = {}
  const scrollProps = {
    children: scrollContext => {
      mutableContext.scrollTo = scrollContext.scrollTo
      mutableContext.scrollX = scrollContext.scrollX
      mutableContext.scrollY = scrollContext.scrollY
      mutableContext.distance = scrollContext.distance
      mutableContext.direction = scrollContext.direction
      return props.children(mutableContext)
    },
  }
  const orientationProps = {
    children: orientationContext => {
      mutableContext.orientation = orientationContext.orientation
      mutableContext.screenOrientation = orientationContext.screenOrientation
      mutableContext.aspect = orientationContext.aspect
      mutableContext.height = orientationContext.height
      mutableContext.width = orientationContext.width
      return (0, _ViewportScroll.default)(scrollProps)
    },
  }
  return (0, _ViewportOrientation.default)(orientationProps)
}

Viewport.propTypes = {
  children: _propTypes.default.func.isRequired,
}
