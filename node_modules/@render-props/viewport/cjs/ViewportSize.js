'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = ViewportSize
exports.ViewportSize_ = void 0

var _extends2 = _interopRequireDefault(
  require('@babel/runtime/helpers/extends')
)

var _react = _interopRequireDefault(require('react'))

var _propTypes = _interopRequireDefault(require('prop-types'))

var _events = _interopRequireDefault(require('@render-props/events'))

var _throttle = require('@render-props/throttle')

var _utils = require('./utils')

var _statics = require('./statics')

/**
<ViewportSize>
  {
    ({width, height}) => (
      <Row>
        <Col x={8}>viewport width: {width}</Col>
        <Col x={8}>viewport height: {height}</Col>
      </Row>
    )
  }
</ViewportSize>
**/
class ViewportSize_ extends _react.default.Component {
  constructor(...args) {
    super(...args)
    this.setSize = (0, _throttle.throttle)(() => this.forceUpdate())
  }

  componentDidMount() {
    this.props.addEvent(_statics.win, 'resize', this.setSize)
    this.props.addEvent(_statics.win, 'orientationchange', this.setSize)
  }

  componentWillUnmount() {
    this.setSize.cancel()
  }

  render() {
    let props

    if (this.props.withCoords) {
      props = (0, _utils.getSize)()
      props.aspect = (0, _utils.getAspect)(_statics.win)
    } else {
      props = {
        getAspect: _utils.getAspect,
        getSize: _utils.getSize,
      }
    }

    return this.props.children(props)
  }
}

exports.ViewportSize_ = ViewportSize_
ViewportSize_.displayName = 'ViewportSize'
ViewportSize_.propTypes = {
  children: _propTypes.default.func.isRequired,
  withCoords: _propTypes.default.bool,
}
ViewportSize_.defaultProps = {
  withCoords: true,
}

function ViewportSize(props) {
  return _react.default.createElement(_events.default, null, function(
    eventsContext
  ) {
    return _react.default.createElement(
      ViewportSize_,
      (0, _extends2.default)({}, eventsContext, {
        withCoords: props.withCoords,
        children: props.children,
      })
    )
  })
}
