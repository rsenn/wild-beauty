"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var handleCallback = function handleCallback(resolve, reject, callback, r) {
  try {
    resolve(callback(r));
  } catch (e) {
    reject(e);
  }
};

var CancelablePromise =
/*#__PURE__*/
function () {
  _createClass(CancelablePromise, null, [{
    key: "all",
    value: function all(iterable) {
      return new CancelablePromise(function (y, n) {
        Promise.all(iterable).then(y, n);
      });
    }
  }, {
    key: "race",
    value: function race(iterable) {
      return new CancelablePromise(function (y, n) {
        Promise.race(iterable).then(y, n);
      });
    }
  }, {
    key: "reject",
    value: function reject(value) {
      return new CancelablePromise(function (y, n) {
        Promise.reject(value).then(y, n);
      });
    }
  }, {
    key: "resolve",
    value: function resolve(value) {
      return new CancelablePromise(function (y, n) {
        Promise.resolve(value).then(y, n);
      });
    }
  }]);

  function CancelablePromise(executor) {
    _classCallCheck(this, CancelablePromise);

    this._promise = new Promise(executor);
    this._canceled = false;
  }

  _createClass(CancelablePromise, [{
    key: "then",
    value: function then(success, error) {
      var _this = this;

      var p = new CancelablePromise(function (resolve, reject) {
        _this._promise.then(function (r) {
          if (_this._canceled) {
            p.cancel();
          }

          if (success && !_this._canceled) {
            handleCallback(resolve, reject, success, r);
          } else {
            resolve(r);
          }
        }, function (r) {
          if (_this._canceled) {
            p.cancel();
          }

          if (error && !_this._canceled) {
            handleCallback(resolve, reject, error, r);
          } else {
            reject(r);
          }
        });
      });
      return p;
    }
  }, {
    key: "catch",
    value: function _catch(error) {
      return this.then(undefined, error);
    }
  }, {
    key: "cancel",
    value: function cancel(errorCallback) {
      this._canceled = true;

      if (errorCallback) {
        this._promise.catch(errorCallback);
      }

      return this;
    }
  }]);

  return CancelablePromise;
}();

exports.default = CancelablePromise;